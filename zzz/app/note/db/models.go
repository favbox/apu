// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	dto "apu/app/note/db/dto"
	"github.com/jackc/pgx/v5/pgtype"
)

type NoteType string

const (
	NoteTypeNormal NoteType = "normal"
	NoteTypeVideo  NoteType = "video"
)

func (e *NoteType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NoteType(s)
	case string:
		*e = NoteType(s)
	default:
		return fmt.Errorf("unsupported scan type for NoteType: %T", src)
	}
	return nil
}

type NullNoteType struct {
	NoteType NoteType
	Valid    bool // Valid is true if NoteType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNoteType) Scan(value interface{}) error {
	if value == nil {
		ns.NoteType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NoteType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNoteType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NoteType), nil
}

type SourceType string

const (
	SourceTypeWeixin    SourceType = "weixin"
	SourceTypeZhimo     SourceType = "zhimo"
	SourceTypeXhs       SourceType = "xhs"
	SourceTypeBehance   SourceType = "behance"
	SourceTypeArchdaily SourceType = "archdaily"
	SourceTypeUnset     SourceType = "unset"
)

func (e *SourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SourceType(s)
	case string:
		*e = SourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for SourceType: %T", src)
	}
	return nil
}

type NullSourceType struct {
	SourceType SourceType
	Valid      bool // Valid is true if SourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSourceType) Scan(value interface{}) error {
	if value == nil {
		ns.SourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SourceType), nil
}

type Image struct {
	ID        int64
	FileID    string
	Width     int32
	Height    int32
	ExtraInfo dto.ExtraInfo
	NoteID    int64
	Sort      int16
	IsCover   bool
}

type Note struct {
	ID          int64
	Title       string
	Description string
	TagIds      []int64
	PostTime    pgtype.Timestamp
	Type        NoteType
	UserID      int64
	VideoID     int64
	IsPrivacy   bool
	IsEnabled   bool
	CreateTime  pgtype.Timestamp
	UpdateTime  pgtype.Timestamp
	SourceType  SourceType
	SourceUrl   string
}
