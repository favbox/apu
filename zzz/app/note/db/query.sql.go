// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const getNote = `-- name: GetNote :one
SELECT id, title, description, tag_ids, post_time, type, user_id, video_id, is_privacy, is_enabled, create_time, update_time, source_type, source_url
FROM notes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetNote(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRow(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TagIds,
		&i.PostTime,
		&i.Type,
		&i.UserID,
		&i.VideoID,
		&i.IsPrivacy,
		&i.IsEnabled,
		&i.CreateTime,
		&i.UpdateTime,
		&i.SourceType,
		&i.SourceUrl,
	)
	return i, err
}

const listImagesByNoteID = `-- name: ListImagesByNoteID :many
SELECT id, file_id, width, height, extra_info, note_id, sort, is_cover
FROM images
WHERE note_id = $1
order by sort
`

func (q *Queries) ListImagesByNoteID(ctx context.Context, noteID int64) ([]Image, error) {
	rows, err := q.db.Query(ctx, listImagesByNoteID, noteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Image
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.Width,
			&i.Height,
			&i.ExtraInfo,
			&i.NoteID,
			&i.Sort,
			&i.IsCover,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
