// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createNotes = `-- name: CreateNotes :batchone
insert into notes (title, description, tag_ids, post_time, type, is_privacy,
                   source_type, source_url)
values ($1, $2, $3, $4, $5, $6,
        $7, $8)
on conflict (source_type, source_url) do update
    set update_time = now()
returning id
`

type CreateNotesBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateNotesParams struct {
	Title       string
	Description string
	TagIds      []int64
	PostTime    pgtype.Timestamp
	Type        NoteType
	IsPrivacy   bool
	SourceType  SourceType
	SourceUrl   string
}

// 批量创建笔记，重复仅更新时间以标记
func (q *Queries) CreateNotes(ctx context.Context, arg []CreateNotesParams) *CreateNotesBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Title,
			a.Description,
			a.TagIds,
			a.PostTime,
			a.Type,
			a.IsPrivacy,
			a.SourceType,
			a.SourceUrl,
		}
		batch.Queue(createNotes, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateNotesBatchResults{br, len(arg), false}
}

func (b *CreateNotesBatchResults) QueryRow(f func(int, int64, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		var id int64
		if b.closed {
			if f != nil {
				f(t, id, ErrBatchAlreadyClosed)
			}
			continue
		}
		row := b.br.QueryRow()
		err := row.Scan(&id)
		if f != nil {
			f(t, id, err)
		}
	}
}

func (b *CreateNotesBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
