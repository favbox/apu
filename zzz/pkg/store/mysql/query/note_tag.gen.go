// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newNoteTag(db *gorm.DB, opts ...gen.DOOption) noteTag {
	_noteTag := noteTag{}

	_noteTag.noteTagDo.UseDB(db, opts...)
	_noteTag.noteTagDo.UseModel(&model.NoteTag{})

	tableName := _noteTag.noteTagDo.TableName()
	_noteTag.ALL = field.NewAsterisk(tableName)
	_noteTag.ID = field.NewInt64(tableName, "id")
	_noteTag.NoteID = field.NewInt64(tableName, "note_id")
	_noteTag.TagID = field.NewInt64(tableName, "tag_id")
	_noteTag.Sort = field.NewInt(tableName, "sort")

	_noteTag.fillFieldMap()

	return _noteTag
}

type noteTag struct {
	noteTagDo

	ALL    field.Asterisk
	ID     field.Int64
	NoteID field.Int64
	TagID  field.Int64
	Sort   field.Int

	fieldMap map[string]field.Expr
}

func (n noteTag) Table(newTableName string) *noteTag {
	n.noteTagDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n noteTag) As(alias string) *noteTag {
	n.noteTagDo.DO = *(n.noteTagDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *noteTag) updateTableName(table string) *noteTag {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.NoteID = field.NewInt64(table, "note_id")
	n.TagID = field.NewInt64(table, "tag_id")
	n.Sort = field.NewInt(table, "sort")

	n.fillFieldMap()

	return n
}

func (n *noteTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *noteTag) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 4)
	n.fieldMap["id"] = n.ID
	n.fieldMap["note_id"] = n.NoteID
	n.fieldMap["tag_id"] = n.TagID
	n.fieldMap["sort"] = n.Sort
}

func (n noteTag) clone(db *gorm.DB) noteTag {
	n.noteTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n noteTag) replaceDB(db *gorm.DB) noteTag {
	n.noteTagDo.ReplaceDB(db)
	return n
}

type noteTagDo struct{ gen.DO }

type INoteTagDo interface {
	gen.SubQuery
	Debug() INoteTagDo
	WithContext(ctx context.Context) INoteTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INoteTagDo
	WriteDB() INoteTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INoteTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INoteTagDo
	Not(conds ...gen.Condition) INoteTagDo
	Or(conds ...gen.Condition) INoteTagDo
	Select(conds ...field.Expr) INoteTagDo
	Where(conds ...gen.Condition) INoteTagDo
	Order(conds ...field.Expr) INoteTagDo
	Distinct(cols ...field.Expr) INoteTagDo
	Omit(cols ...field.Expr) INoteTagDo
	Join(table schema.Tabler, on ...field.Expr) INoteTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INoteTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) INoteTagDo
	Group(cols ...field.Expr) INoteTagDo
	Having(conds ...gen.Condition) INoteTagDo
	Limit(limit int) INoteTagDo
	Offset(offset int) INoteTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INoteTagDo
	Unscoped() INoteTagDo
	Create(values ...*model.NoteTag) error
	CreateInBatches(values []*model.NoteTag, batchSize int) error
	Save(values ...*model.NoteTag) error
	First() (*model.NoteTag, error)
	Take() (*model.NoteTag, error)
	Last() (*model.NoteTag, error)
	Find() ([]*model.NoteTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteTag, err error)
	FindInBatches(result *[]*model.NoteTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NoteTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INoteTagDo
	Assign(attrs ...field.AssignExpr) INoteTagDo
	Joins(fields ...field.RelationField) INoteTagDo
	Preload(fields ...field.RelationField) INoteTagDo
	FirstOrInit() (*model.NoteTag, error)
	FirstOrCreate() (*model.NoteTag, error)
	FindByPage(offset int, limit int) (result []*model.NoteTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INoteTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n noteTagDo) Debug() INoteTagDo {
	return n.withDO(n.DO.Debug())
}

func (n noteTagDo) WithContext(ctx context.Context) INoteTagDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n noteTagDo) ReadDB() INoteTagDo {
	return n.Clauses(dbresolver.Read)
}

func (n noteTagDo) WriteDB() INoteTagDo {
	return n.Clauses(dbresolver.Write)
}

func (n noteTagDo) Session(config *gorm.Session) INoteTagDo {
	return n.withDO(n.DO.Session(config))
}

func (n noteTagDo) Clauses(conds ...clause.Expression) INoteTagDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n noteTagDo) Returning(value interface{}, columns ...string) INoteTagDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n noteTagDo) Not(conds ...gen.Condition) INoteTagDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n noteTagDo) Or(conds ...gen.Condition) INoteTagDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n noteTagDo) Select(conds ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n noteTagDo) Where(conds ...gen.Condition) INoteTagDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n noteTagDo) Order(conds ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n noteTagDo) Distinct(cols ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n noteTagDo) Omit(cols ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n noteTagDo) Join(table schema.Tabler, on ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n noteTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n noteTagDo) RightJoin(table schema.Tabler, on ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n noteTagDo) Group(cols ...field.Expr) INoteTagDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n noteTagDo) Having(conds ...gen.Condition) INoteTagDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n noteTagDo) Limit(limit int) INoteTagDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n noteTagDo) Offset(offset int) INoteTagDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n noteTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INoteTagDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n noteTagDo) Unscoped() INoteTagDo {
	return n.withDO(n.DO.Unscoped())
}

func (n noteTagDo) Create(values ...*model.NoteTag) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n noteTagDo) CreateInBatches(values []*model.NoteTag, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n noteTagDo) Save(values ...*model.NoteTag) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n noteTagDo) First() (*model.NoteTag, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteTag), nil
	}
}

func (n noteTagDo) Take() (*model.NoteTag, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteTag), nil
	}
}

func (n noteTagDo) Last() (*model.NoteTag, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteTag), nil
	}
}

func (n noteTagDo) Find() ([]*model.NoteTag, error) {
	result, err := n.DO.Find()
	return result.([]*model.NoteTag), err
}

func (n noteTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteTag, err error) {
	buf := make([]*model.NoteTag, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n noteTagDo) FindInBatches(result *[]*model.NoteTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n noteTagDo) Attrs(attrs ...field.AssignExpr) INoteTagDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n noteTagDo) Assign(attrs ...field.AssignExpr) INoteTagDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n noteTagDo) Joins(fields ...field.RelationField) INoteTagDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n noteTagDo) Preload(fields ...field.RelationField) INoteTagDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n noteTagDo) FirstOrInit() (*model.NoteTag, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteTag), nil
	}
}

func (n noteTagDo) FirstOrCreate() (*model.NoteTag, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteTag), nil
	}
}

func (n noteTagDo) FindByPage(offset int, limit int) (result []*model.NoteTag, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n noteTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n noteTagDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n noteTagDo) Delete(models ...*model.NoteTag) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *noteTagDo) withDO(do gen.Dao) *noteTagDo {
	n.DO = *do.(*gen.DO)
	return n
}
