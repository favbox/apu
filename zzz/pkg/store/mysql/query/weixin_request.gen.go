// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newWeixinRequest(db *gorm.DB, opts ...gen.DOOption) weixinRequest {
	_weixinRequest := weixinRequest{}

	_weixinRequest.weixinRequestDo.UseDB(db, opts...)
	_weixinRequest.weixinRequestDo.UseModel(&model.WeixinRequest{})

	tableName := _weixinRequest.weixinRequestDo.TableName()
	_weixinRequest.ALL = field.NewAsterisk(tableName)
	_weixinRequest.ID = field.NewInt(tableName, "id")
	_weixinRequest.Type = field.NewString(tableName, "type")
	_weixinRequest.UserID = field.NewString(tableName, "user_id")
	_weixinRequest.Headers = field.NewString(tableName, "headers")
	_weixinRequest.Cookie = field.NewString(tableName, "cookie")
	_weixinRequest.Status = field.NewString(tableName, "status")
	_weixinRequest.CreateTime = field.NewTime(tableName, "create_time")
	_weixinRequest.UpdateTime = field.NewTime(tableName, "update_time")

	_weixinRequest.fillFieldMap()

	return _weixinRequest
}

type weixinRequest struct {
	weixinRequestDo

	ALL        field.Asterisk
	ID         field.Int
	Type       field.String
	UserID     field.String // wxuinæˆ–vid
	Headers    field.String
	Cookie     field.String
	Status     field.String
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (w weixinRequest) Table(newTableName string) *weixinRequest {
	w.weixinRequestDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w weixinRequest) As(alias string) *weixinRequest {
	w.weixinRequestDo.DO = *(w.weixinRequestDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *weixinRequest) updateTableName(table string) *weixinRequest {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt(table, "id")
	w.Type = field.NewString(table, "type")
	w.UserID = field.NewString(table, "user_id")
	w.Headers = field.NewString(table, "headers")
	w.Cookie = field.NewString(table, "cookie")
	w.Status = field.NewString(table, "status")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")

	w.fillFieldMap()

	return w
}

func (w *weixinRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *weixinRequest) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["type"] = w.Type
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["headers"] = w.Headers
	w.fieldMap["cookie"] = w.Cookie
	w.fieldMap["status"] = w.Status
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
}

func (w weixinRequest) clone(db *gorm.DB) weixinRequest {
	w.weixinRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w weixinRequest) replaceDB(db *gorm.DB) weixinRequest {
	w.weixinRequestDo.ReplaceDB(db)
	return w
}

type weixinRequestDo struct{ gen.DO }

type IWeixinRequestDo interface {
	gen.SubQuery
	Debug() IWeixinRequestDo
	WithContext(ctx context.Context) IWeixinRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWeixinRequestDo
	WriteDB() IWeixinRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWeixinRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWeixinRequestDo
	Not(conds ...gen.Condition) IWeixinRequestDo
	Or(conds ...gen.Condition) IWeixinRequestDo
	Select(conds ...field.Expr) IWeixinRequestDo
	Where(conds ...gen.Condition) IWeixinRequestDo
	Order(conds ...field.Expr) IWeixinRequestDo
	Distinct(cols ...field.Expr) IWeixinRequestDo
	Omit(cols ...field.Expr) IWeixinRequestDo
	Join(table schema.Tabler, on ...field.Expr) IWeixinRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWeixinRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWeixinRequestDo
	Group(cols ...field.Expr) IWeixinRequestDo
	Having(conds ...gen.Condition) IWeixinRequestDo
	Limit(limit int) IWeixinRequestDo
	Offset(offset int) IWeixinRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWeixinRequestDo
	Unscoped() IWeixinRequestDo
	Create(values ...*model.WeixinRequest) error
	CreateInBatches(values []*model.WeixinRequest, batchSize int) error
	Save(values ...*model.WeixinRequest) error
	First() (*model.WeixinRequest, error)
	Take() (*model.WeixinRequest, error)
	Last() (*model.WeixinRequest, error)
	Find() ([]*model.WeixinRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeixinRequest, err error)
	FindInBatches(result *[]*model.WeixinRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WeixinRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWeixinRequestDo
	Assign(attrs ...field.AssignExpr) IWeixinRequestDo
	Joins(fields ...field.RelationField) IWeixinRequestDo
	Preload(fields ...field.RelationField) IWeixinRequestDo
	FirstOrInit() (*model.WeixinRequest, error)
	FirstOrCreate() (*model.WeixinRequest, error)
	FindByPage(offset int, limit int) (result []*model.WeixinRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWeixinRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w weixinRequestDo) Debug() IWeixinRequestDo {
	return w.withDO(w.DO.Debug())
}

func (w weixinRequestDo) WithContext(ctx context.Context) IWeixinRequestDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w weixinRequestDo) ReadDB() IWeixinRequestDo {
	return w.Clauses(dbresolver.Read)
}

func (w weixinRequestDo) WriteDB() IWeixinRequestDo {
	return w.Clauses(dbresolver.Write)
}

func (w weixinRequestDo) Session(config *gorm.Session) IWeixinRequestDo {
	return w.withDO(w.DO.Session(config))
}

func (w weixinRequestDo) Clauses(conds ...clause.Expression) IWeixinRequestDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w weixinRequestDo) Returning(value interface{}, columns ...string) IWeixinRequestDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w weixinRequestDo) Not(conds ...gen.Condition) IWeixinRequestDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w weixinRequestDo) Or(conds ...gen.Condition) IWeixinRequestDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w weixinRequestDo) Select(conds ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w weixinRequestDo) Where(conds ...gen.Condition) IWeixinRequestDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w weixinRequestDo) Order(conds ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w weixinRequestDo) Distinct(cols ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w weixinRequestDo) Omit(cols ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w weixinRequestDo) Join(table schema.Tabler, on ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w weixinRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w weixinRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w weixinRequestDo) Group(cols ...field.Expr) IWeixinRequestDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w weixinRequestDo) Having(conds ...gen.Condition) IWeixinRequestDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w weixinRequestDo) Limit(limit int) IWeixinRequestDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w weixinRequestDo) Offset(offset int) IWeixinRequestDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w weixinRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWeixinRequestDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w weixinRequestDo) Unscoped() IWeixinRequestDo {
	return w.withDO(w.DO.Unscoped())
}

func (w weixinRequestDo) Create(values ...*model.WeixinRequest) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w weixinRequestDo) CreateInBatches(values []*model.WeixinRequest, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w weixinRequestDo) Save(values ...*model.WeixinRequest) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w weixinRequestDo) First() (*model.WeixinRequest, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinRequest), nil
	}
}

func (w weixinRequestDo) Take() (*model.WeixinRequest, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinRequest), nil
	}
}

func (w weixinRequestDo) Last() (*model.WeixinRequest, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinRequest), nil
	}
}

func (w weixinRequestDo) Find() ([]*model.WeixinRequest, error) {
	result, err := w.DO.Find()
	return result.([]*model.WeixinRequest), err
}

func (w weixinRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeixinRequest, err error) {
	buf := make([]*model.WeixinRequest, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w weixinRequestDo) FindInBatches(result *[]*model.WeixinRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w weixinRequestDo) Attrs(attrs ...field.AssignExpr) IWeixinRequestDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w weixinRequestDo) Assign(attrs ...field.AssignExpr) IWeixinRequestDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w weixinRequestDo) Joins(fields ...field.RelationField) IWeixinRequestDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w weixinRequestDo) Preload(fields ...field.RelationField) IWeixinRequestDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w weixinRequestDo) FirstOrInit() (*model.WeixinRequest, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinRequest), nil
	}
}

func (w weixinRequestDo) FirstOrCreate() (*model.WeixinRequest, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinRequest), nil
	}
}

func (w weixinRequestDo) FindByPage(offset int, limit int) (result []*model.WeixinRequest, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w weixinRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w weixinRequestDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w weixinRequestDo) Delete(models ...*model.WeixinRequest) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *weixinRequestDo) withDO(do gen.Dao) *weixinRequestDo {
	w.DO = *do.(*gen.DO)
	return w
}
