// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newNoteImage(db *gorm.DB, opts ...gen.DOOption) noteImage {
	_noteImage := noteImage{}

	_noteImage.noteImageDo.UseDB(db, opts...)
	_noteImage.noteImageDo.UseModel(&model.NoteImage{})

	tableName := _noteImage.noteImageDo.TableName()
	_noteImage.ALL = field.NewAsterisk(tableName)
	_noteImage.ID = field.NewInt64(tableName, "id")
	_noteImage.NoteID = field.NewUint64(tableName, "note_id")
	_noteImage.Filename = field.NewString(tableName, "filename")
	_noteImage.OriginalURL = field.NewString(tableName, "original_url")
	_noteImage.Width = field.NewInt(tableName, "width")
	_noteImage.Height = field.NewInt(tableName, "height")
	_noteImage.Sort = field.NewInt(tableName, "sort")
	_noteImage.CreateTime = field.NewTime(tableName, "create_time")
	_noteImage.UpdateTime = field.NewTime(tableName, "update_time")

	_noteImage.fillFieldMap()

	return _noteImage
}

type noteImage struct {
	noteImageDo

	ALL         field.Asterisk
	ID          field.Int64
	NoteID      field.Uint64
	Filename    field.String // weixin:encode(url)
	OriginalURL field.String
	Width       field.Int
	Height      field.Int
	Sort        field.Int
	CreateTime  field.Time
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (n noteImage) Table(newTableName string) *noteImage {
	n.noteImageDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n noteImage) As(alias string) *noteImage {
	n.noteImageDo.DO = *(n.noteImageDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *noteImage) updateTableName(table string) *noteImage {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.NoteID = field.NewUint64(table, "note_id")
	n.Filename = field.NewString(table, "filename")
	n.OriginalURL = field.NewString(table, "original_url")
	n.Width = field.NewInt(table, "width")
	n.Height = field.NewInt(table, "height")
	n.Sort = field.NewInt(table, "sort")
	n.CreateTime = field.NewTime(table, "create_time")
	n.UpdateTime = field.NewTime(table, "update_time")

	n.fillFieldMap()

	return n
}

func (n *noteImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *noteImage) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 9)
	n.fieldMap["id"] = n.ID
	n.fieldMap["note_id"] = n.NoteID
	n.fieldMap["filename"] = n.Filename
	n.fieldMap["original_url"] = n.OriginalURL
	n.fieldMap["width"] = n.Width
	n.fieldMap["height"] = n.Height
	n.fieldMap["sort"] = n.Sort
	n.fieldMap["create_time"] = n.CreateTime
	n.fieldMap["update_time"] = n.UpdateTime
}

func (n noteImage) clone(db *gorm.DB) noteImage {
	n.noteImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n noteImage) replaceDB(db *gorm.DB) noteImage {
	n.noteImageDo.ReplaceDB(db)
	return n
}

type noteImageDo struct{ gen.DO }

type INoteImageDo interface {
	gen.SubQuery
	Debug() INoteImageDo
	WithContext(ctx context.Context) INoteImageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INoteImageDo
	WriteDB() INoteImageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INoteImageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INoteImageDo
	Not(conds ...gen.Condition) INoteImageDo
	Or(conds ...gen.Condition) INoteImageDo
	Select(conds ...field.Expr) INoteImageDo
	Where(conds ...gen.Condition) INoteImageDo
	Order(conds ...field.Expr) INoteImageDo
	Distinct(cols ...field.Expr) INoteImageDo
	Omit(cols ...field.Expr) INoteImageDo
	Join(table schema.Tabler, on ...field.Expr) INoteImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INoteImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) INoteImageDo
	Group(cols ...field.Expr) INoteImageDo
	Having(conds ...gen.Condition) INoteImageDo
	Limit(limit int) INoteImageDo
	Offset(offset int) INoteImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INoteImageDo
	Unscoped() INoteImageDo
	Create(values ...*model.NoteImage) error
	CreateInBatches(values []*model.NoteImage, batchSize int) error
	Save(values ...*model.NoteImage) error
	First() (*model.NoteImage, error)
	Take() (*model.NoteImage, error)
	Last() (*model.NoteImage, error)
	Find() ([]*model.NoteImage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteImage, err error)
	FindInBatches(result *[]*model.NoteImage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NoteImage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INoteImageDo
	Assign(attrs ...field.AssignExpr) INoteImageDo
	Joins(fields ...field.RelationField) INoteImageDo
	Preload(fields ...field.RelationField) INoteImageDo
	FirstOrInit() (*model.NoteImage, error)
	FirstOrCreate() (*model.NoteImage, error)
	FindByPage(offset int, limit int) (result []*model.NoteImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INoteImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n noteImageDo) Debug() INoteImageDo {
	return n.withDO(n.DO.Debug())
}

func (n noteImageDo) WithContext(ctx context.Context) INoteImageDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n noteImageDo) ReadDB() INoteImageDo {
	return n.Clauses(dbresolver.Read)
}

func (n noteImageDo) WriteDB() INoteImageDo {
	return n.Clauses(dbresolver.Write)
}

func (n noteImageDo) Session(config *gorm.Session) INoteImageDo {
	return n.withDO(n.DO.Session(config))
}

func (n noteImageDo) Clauses(conds ...clause.Expression) INoteImageDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n noteImageDo) Returning(value interface{}, columns ...string) INoteImageDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n noteImageDo) Not(conds ...gen.Condition) INoteImageDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n noteImageDo) Or(conds ...gen.Condition) INoteImageDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n noteImageDo) Select(conds ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n noteImageDo) Where(conds ...gen.Condition) INoteImageDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n noteImageDo) Order(conds ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n noteImageDo) Distinct(cols ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n noteImageDo) Omit(cols ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n noteImageDo) Join(table schema.Tabler, on ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n noteImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n noteImageDo) RightJoin(table schema.Tabler, on ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n noteImageDo) Group(cols ...field.Expr) INoteImageDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n noteImageDo) Having(conds ...gen.Condition) INoteImageDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n noteImageDo) Limit(limit int) INoteImageDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n noteImageDo) Offset(offset int) INoteImageDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n noteImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INoteImageDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n noteImageDo) Unscoped() INoteImageDo {
	return n.withDO(n.DO.Unscoped())
}

func (n noteImageDo) Create(values ...*model.NoteImage) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n noteImageDo) CreateInBatches(values []*model.NoteImage, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n noteImageDo) Save(values ...*model.NoteImage) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n noteImageDo) First() (*model.NoteImage, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteImage), nil
	}
}

func (n noteImageDo) Take() (*model.NoteImage, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteImage), nil
	}
}

func (n noteImageDo) Last() (*model.NoteImage, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteImage), nil
	}
}

func (n noteImageDo) Find() ([]*model.NoteImage, error) {
	result, err := n.DO.Find()
	return result.([]*model.NoteImage), err
}

func (n noteImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteImage, err error) {
	buf := make([]*model.NoteImage, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n noteImageDo) FindInBatches(result *[]*model.NoteImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n noteImageDo) Attrs(attrs ...field.AssignExpr) INoteImageDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n noteImageDo) Assign(attrs ...field.AssignExpr) INoteImageDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n noteImageDo) Joins(fields ...field.RelationField) INoteImageDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n noteImageDo) Preload(fields ...field.RelationField) INoteImageDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n noteImageDo) FirstOrInit() (*model.NoteImage, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteImage), nil
	}
}

func (n noteImageDo) FirstOrCreate() (*model.NoteImage, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteImage), nil
	}
}

func (n noteImageDo) FindByPage(offset int, limit int) (result []*model.NoteImage, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n noteImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n noteImageDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n noteImageDo) Delete(models ...*model.NoteImage) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *noteImageDo) withDO(do gen.Dao) *noteImageDo {
	n.DO = *do.(*gen.DO)
	return n
}
