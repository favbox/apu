// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newNoteVideo(db *gorm.DB, opts ...gen.DOOption) noteVideo {
	_noteVideo := noteVideo{}

	_noteVideo.noteVideoDo.UseDB(db, opts...)
	_noteVideo.noteVideoDo.UseModel(&model.NoteVideo{})

	tableName := _noteVideo.noteVideoDo.TableName()
	_noteVideo.ALL = field.NewAsterisk(tableName)
	_noteVideo.ID = field.NewInt64(tableName, "id")
	_noteVideo.UID = field.NewUint64(tableName, "uid")
	_noteVideo.NoteID = field.NewInt64(tableName, "note_id")
	_noteVideo.OriginalURL = field.NewString(tableName, "original_url")
	_noteVideo.Width = field.NewInt(tableName, "width")
	_noteVideo.Height = field.NewInt(tableName, "height")
	_noteVideo.CreateTime = field.NewTime(tableName, "create_time")

	_noteVideo.fillFieldMap()

	return _noteVideo
}

type noteVideo struct {
	noteVideoDo

	ALL         field.Asterisk
	ID          field.Int64
	UID         field.Uint64 // xxhash3
	NoteID      field.Int64
	OriginalURL field.String
	Width       field.Int
	Height      field.Int
	CreateTime  field.Time

	fieldMap map[string]field.Expr
}

func (n noteVideo) Table(newTableName string) *noteVideo {
	n.noteVideoDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n noteVideo) As(alias string) *noteVideo {
	n.noteVideoDo.DO = *(n.noteVideoDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *noteVideo) updateTableName(table string) *noteVideo {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.UID = field.NewUint64(table, "uid")
	n.NoteID = field.NewInt64(table, "note_id")
	n.OriginalURL = field.NewString(table, "original_url")
	n.Width = field.NewInt(table, "width")
	n.Height = field.NewInt(table, "height")
	n.CreateTime = field.NewTime(table, "create_time")

	n.fillFieldMap()

	return n
}

func (n *noteVideo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *noteVideo) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 7)
	n.fieldMap["id"] = n.ID
	n.fieldMap["uid"] = n.UID
	n.fieldMap["note_id"] = n.NoteID
	n.fieldMap["original_url"] = n.OriginalURL
	n.fieldMap["width"] = n.Width
	n.fieldMap["height"] = n.Height
	n.fieldMap["create_time"] = n.CreateTime
}

func (n noteVideo) clone(db *gorm.DB) noteVideo {
	n.noteVideoDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n noteVideo) replaceDB(db *gorm.DB) noteVideo {
	n.noteVideoDo.ReplaceDB(db)
	return n
}

type noteVideoDo struct{ gen.DO }

type INoteVideoDo interface {
	gen.SubQuery
	Debug() INoteVideoDo
	WithContext(ctx context.Context) INoteVideoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INoteVideoDo
	WriteDB() INoteVideoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INoteVideoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INoteVideoDo
	Not(conds ...gen.Condition) INoteVideoDo
	Or(conds ...gen.Condition) INoteVideoDo
	Select(conds ...field.Expr) INoteVideoDo
	Where(conds ...gen.Condition) INoteVideoDo
	Order(conds ...field.Expr) INoteVideoDo
	Distinct(cols ...field.Expr) INoteVideoDo
	Omit(cols ...field.Expr) INoteVideoDo
	Join(table schema.Tabler, on ...field.Expr) INoteVideoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INoteVideoDo
	RightJoin(table schema.Tabler, on ...field.Expr) INoteVideoDo
	Group(cols ...field.Expr) INoteVideoDo
	Having(conds ...gen.Condition) INoteVideoDo
	Limit(limit int) INoteVideoDo
	Offset(offset int) INoteVideoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INoteVideoDo
	Unscoped() INoteVideoDo
	Create(values ...*model.NoteVideo) error
	CreateInBatches(values []*model.NoteVideo, batchSize int) error
	Save(values ...*model.NoteVideo) error
	First() (*model.NoteVideo, error)
	Take() (*model.NoteVideo, error)
	Last() (*model.NoteVideo, error)
	Find() ([]*model.NoteVideo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteVideo, err error)
	FindInBatches(result *[]*model.NoteVideo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NoteVideo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INoteVideoDo
	Assign(attrs ...field.AssignExpr) INoteVideoDo
	Joins(fields ...field.RelationField) INoteVideoDo
	Preload(fields ...field.RelationField) INoteVideoDo
	FirstOrInit() (*model.NoteVideo, error)
	FirstOrCreate() (*model.NoteVideo, error)
	FindByPage(offset int, limit int) (result []*model.NoteVideo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INoteVideoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n noteVideoDo) Debug() INoteVideoDo {
	return n.withDO(n.DO.Debug())
}

func (n noteVideoDo) WithContext(ctx context.Context) INoteVideoDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n noteVideoDo) ReadDB() INoteVideoDo {
	return n.Clauses(dbresolver.Read)
}

func (n noteVideoDo) WriteDB() INoteVideoDo {
	return n.Clauses(dbresolver.Write)
}

func (n noteVideoDo) Session(config *gorm.Session) INoteVideoDo {
	return n.withDO(n.DO.Session(config))
}

func (n noteVideoDo) Clauses(conds ...clause.Expression) INoteVideoDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n noteVideoDo) Returning(value interface{}, columns ...string) INoteVideoDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n noteVideoDo) Not(conds ...gen.Condition) INoteVideoDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n noteVideoDo) Or(conds ...gen.Condition) INoteVideoDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n noteVideoDo) Select(conds ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n noteVideoDo) Where(conds ...gen.Condition) INoteVideoDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n noteVideoDo) Order(conds ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n noteVideoDo) Distinct(cols ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n noteVideoDo) Omit(cols ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n noteVideoDo) Join(table schema.Tabler, on ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n noteVideoDo) LeftJoin(table schema.Tabler, on ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n noteVideoDo) RightJoin(table schema.Tabler, on ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n noteVideoDo) Group(cols ...field.Expr) INoteVideoDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n noteVideoDo) Having(conds ...gen.Condition) INoteVideoDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n noteVideoDo) Limit(limit int) INoteVideoDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n noteVideoDo) Offset(offset int) INoteVideoDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n noteVideoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INoteVideoDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n noteVideoDo) Unscoped() INoteVideoDo {
	return n.withDO(n.DO.Unscoped())
}

func (n noteVideoDo) Create(values ...*model.NoteVideo) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n noteVideoDo) CreateInBatches(values []*model.NoteVideo, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n noteVideoDo) Save(values ...*model.NoteVideo) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n noteVideoDo) First() (*model.NoteVideo, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteVideo), nil
	}
}

func (n noteVideoDo) Take() (*model.NoteVideo, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteVideo), nil
	}
}

func (n noteVideoDo) Last() (*model.NoteVideo, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteVideo), nil
	}
}

func (n noteVideoDo) Find() ([]*model.NoteVideo, error) {
	result, err := n.DO.Find()
	return result.([]*model.NoteVideo), err
}

func (n noteVideoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteVideo, err error) {
	buf := make([]*model.NoteVideo, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n noteVideoDo) FindInBatches(result *[]*model.NoteVideo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n noteVideoDo) Attrs(attrs ...field.AssignExpr) INoteVideoDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n noteVideoDo) Assign(attrs ...field.AssignExpr) INoteVideoDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n noteVideoDo) Joins(fields ...field.RelationField) INoteVideoDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n noteVideoDo) Preload(fields ...field.RelationField) INoteVideoDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n noteVideoDo) FirstOrInit() (*model.NoteVideo, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteVideo), nil
	}
}

func (n noteVideoDo) FirstOrCreate() (*model.NoteVideo, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteVideo), nil
	}
}

func (n noteVideoDo) FindByPage(offset int, limit int) (result []*model.NoteVideo, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n noteVideoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n noteVideoDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n noteVideoDo) Delete(models ...*model.NoteVideo) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *noteVideoDo) withDO(do gen.Dao) *noteVideoDo {
	n.DO = *do.(*gen.DO)
	return n
}
