// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newOriginalURL(db *gorm.DB, opts ...gen.DOOption) originalURL {
	_originalURL := originalURL{}

	_originalURL.originalURLDo.UseDB(db, opts...)
	_originalURL.originalURLDo.UseModel(&model.OriginalURL{})

	tableName := _originalURL.originalURLDo.TableName()
	_originalURL.ALL = field.NewAsterisk(tableName)
	_originalURL.ID = field.NewInt64(tableName, "id")
	_originalURL.Type = field.NewString(tableName, "type")
	_originalURL.URL = field.NewString(tableName, "url")
	_originalURL.CreatedAt = field.NewTime(tableName, "created_at")
	_originalURL.UpdatedAt = field.NewTime(tableName, "updated_at")
	_originalURL.DeletedAt = field.NewField(tableName, "deleted_at")

	_originalURL.fillFieldMap()

	return _originalURL
}

type originalURL struct {
	originalURLDo

	ALL       field.Asterisk
	ID        field.Int64
	Type      field.String // 1:doc,2:img
	URL       field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (o originalURL) Table(newTableName string) *originalURL {
	o.originalURLDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o originalURL) As(alias string) *originalURL {
	o.originalURLDo.DO = *(o.originalURLDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *originalURL) updateTableName(table string) *originalURL {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.Type = field.NewString(table, "type")
	o.URL = field.NewString(table, "url")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")

	o.fillFieldMap()

	return o
}

func (o *originalURL) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *originalURL) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["id"] = o.ID
	o.fieldMap["type"] = o.Type
	o.fieldMap["url"] = o.URL
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt
}

func (o originalURL) clone(db *gorm.DB) originalURL {
	o.originalURLDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o originalURL) replaceDB(db *gorm.DB) originalURL {
	o.originalURLDo.ReplaceDB(db)
	return o
}

type originalURLDo struct{ gen.DO }

type IOriginalURLDo interface {
	gen.SubQuery
	Debug() IOriginalURLDo
	WithContext(ctx context.Context) IOriginalURLDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOriginalURLDo
	WriteDB() IOriginalURLDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOriginalURLDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOriginalURLDo
	Not(conds ...gen.Condition) IOriginalURLDo
	Or(conds ...gen.Condition) IOriginalURLDo
	Select(conds ...field.Expr) IOriginalURLDo
	Where(conds ...gen.Condition) IOriginalURLDo
	Order(conds ...field.Expr) IOriginalURLDo
	Distinct(cols ...field.Expr) IOriginalURLDo
	Omit(cols ...field.Expr) IOriginalURLDo
	Join(table schema.Tabler, on ...field.Expr) IOriginalURLDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOriginalURLDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOriginalURLDo
	Group(cols ...field.Expr) IOriginalURLDo
	Having(conds ...gen.Condition) IOriginalURLDo
	Limit(limit int) IOriginalURLDo
	Offset(offset int) IOriginalURLDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOriginalURLDo
	Unscoped() IOriginalURLDo
	Create(values ...*model.OriginalURL) error
	CreateInBatches(values []*model.OriginalURL, batchSize int) error
	Save(values ...*model.OriginalURL) error
	First() (*model.OriginalURL, error)
	Take() (*model.OriginalURL, error)
	Last() (*model.OriginalURL, error)
	Find() ([]*model.OriginalURL, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OriginalURL, err error)
	FindInBatches(result *[]*model.OriginalURL, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OriginalURL) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOriginalURLDo
	Assign(attrs ...field.AssignExpr) IOriginalURLDo
	Joins(fields ...field.RelationField) IOriginalURLDo
	Preload(fields ...field.RelationField) IOriginalURLDo
	FirstOrInit() (*model.OriginalURL, error)
	FirstOrCreate() (*model.OriginalURL, error)
	FindByPage(offset int, limit int) (result []*model.OriginalURL, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOriginalURLDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o originalURLDo) Debug() IOriginalURLDo {
	return o.withDO(o.DO.Debug())
}

func (o originalURLDo) WithContext(ctx context.Context) IOriginalURLDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o originalURLDo) ReadDB() IOriginalURLDo {
	return o.Clauses(dbresolver.Read)
}

func (o originalURLDo) WriteDB() IOriginalURLDo {
	return o.Clauses(dbresolver.Write)
}

func (o originalURLDo) Session(config *gorm.Session) IOriginalURLDo {
	return o.withDO(o.DO.Session(config))
}

func (o originalURLDo) Clauses(conds ...clause.Expression) IOriginalURLDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o originalURLDo) Returning(value interface{}, columns ...string) IOriginalURLDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o originalURLDo) Not(conds ...gen.Condition) IOriginalURLDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o originalURLDo) Or(conds ...gen.Condition) IOriginalURLDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o originalURLDo) Select(conds ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o originalURLDo) Where(conds ...gen.Condition) IOriginalURLDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o originalURLDo) Order(conds ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o originalURLDo) Distinct(cols ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o originalURLDo) Omit(cols ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o originalURLDo) Join(table schema.Tabler, on ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o originalURLDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o originalURLDo) RightJoin(table schema.Tabler, on ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o originalURLDo) Group(cols ...field.Expr) IOriginalURLDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o originalURLDo) Having(conds ...gen.Condition) IOriginalURLDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o originalURLDo) Limit(limit int) IOriginalURLDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o originalURLDo) Offset(offset int) IOriginalURLDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o originalURLDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOriginalURLDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o originalURLDo) Unscoped() IOriginalURLDo {
	return o.withDO(o.DO.Unscoped())
}

func (o originalURLDo) Create(values ...*model.OriginalURL) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o originalURLDo) CreateInBatches(values []*model.OriginalURL, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o originalURLDo) Save(values ...*model.OriginalURL) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o originalURLDo) First() (*model.OriginalURL, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalURL), nil
	}
}

func (o originalURLDo) Take() (*model.OriginalURL, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalURL), nil
	}
}

func (o originalURLDo) Last() (*model.OriginalURL, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalURL), nil
	}
}

func (o originalURLDo) Find() ([]*model.OriginalURL, error) {
	result, err := o.DO.Find()
	return result.([]*model.OriginalURL), err
}

func (o originalURLDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OriginalURL, err error) {
	buf := make([]*model.OriginalURL, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o originalURLDo) FindInBatches(result *[]*model.OriginalURL, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o originalURLDo) Attrs(attrs ...field.AssignExpr) IOriginalURLDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o originalURLDo) Assign(attrs ...field.AssignExpr) IOriginalURLDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o originalURLDo) Joins(fields ...field.RelationField) IOriginalURLDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o originalURLDo) Preload(fields ...field.RelationField) IOriginalURLDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o originalURLDo) FirstOrInit() (*model.OriginalURL, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalURL), nil
	}
}

func (o originalURLDo) FirstOrCreate() (*model.OriginalURL, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OriginalURL), nil
	}
}

func (o originalURLDo) FindByPage(offset int, limit int) (result []*model.OriginalURL, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o originalURLDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o originalURLDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o originalURLDo) Delete(models ...*model.OriginalURL) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *originalURLDo) withDO(do gen.Dao) *originalURLDo {
	o.DO = *do.(*gen.DO)
	return o
}
