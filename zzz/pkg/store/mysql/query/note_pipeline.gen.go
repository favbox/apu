// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newNotePipeline(db *gorm.DB, opts ...gen.DOOption) notePipeline {
	_notePipeline := notePipeline{}

	_notePipeline.notePipelineDo.UseDB(db, opts...)
	_notePipeline.notePipelineDo.UseModel(&model.NotePipeline{})

	tableName := _notePipeline.notePipelineDo.TableName()
	_notePipeline.ALL = field.NewAsterisk(tableName)
	_notePipeline.ID = field.NewUint64(tableName, "id")
	_notePipeline.IsCounted = field.NewBool(tableName, "is_counted")
	_notePipeline.IsDetailed = field.NewBool(tableName, "is_detailed")
	_notePipeline.IsStructured = field.NewBool(tableName, "is_structured")
	_notePipeline.IsEmbedded = field.NewBool(tableName, "is_embedded")
	_notePipeline.IsIndexed = field.NewBool(tableName, "is_indexed")
	_notePipeline.CreateTime = field.NewTime(tableName, "create_time")
	_notePipeline.UpdateTime = field.NewTime(tableName, "update_time")

	_notePipeline.fillFieldMap()

	return _notePipeline
}

type notePipeline struct {
	notePipelineDo

	ALL          field.Asterisk
	ID           field.Uint64
	IsCounted    field.Bool // 交互量已采集
	IsDetailed   field.Bool // 详情页已采集
	IsStructured field.Bool // 内容已结构化
	IsEmbedded   field.Bool // 内容已向量化
	IsIndexed    field.Bool // 内容已入索引
	CreateTime   field.Time
	UpdateTime   field.Time

	fieldMap map[string]field.Expr
}

func (n notePipeline) Table(newTableName string) *notePipeline {
	n.notePipelineDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n notePipeline) As(alias string) *notePipeline {
	n.notePipelineDo.DO = *(n.notePipelineDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *notePipeline) updateTableName(table string) *notePipeline {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewUint64(table, "id")
	n.IsCounted = field.NewBool(table, "is_counted")
	n.IsDetailed = field.NewBool(table, "is_detailed")
	n.IsStructured = field.NewBool(table, "is_structured")
	n.IsEmbedded = field.NewBool(table, "is_embedded")
	n.IsIndexed = field.NewBool(table, "is_indexed")
	n.CreateTime = field.NewTime(table, "create_time")
	n.UpdateTime = field.NewTime(table, "update_time")

	n.fillFieldMap()

	return n
}

func (n *notePipeline) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *notePipeline) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 8)
	n.fieldMap["id"] = n.ID
	n.fieldMap["is_counted"] = n.IsCounted
	n.fieldMap["is_detailed"] = n.IsDetailed
	n.fieldMap["is_structured"] = n.IsStructured
	n.fieldMap["is_embedded"] = n.IsEmbedded
	n.fieldMap["is_indexed"] = n.IsIndexed
	n.fieldMap["create_time"] = n.CreateTime
	n.fieldMap["update_time"] = n.UpdateTime
}

func (n notePipeline) clone(db *gorm.DB) notePipeline {
	n.notePipelineDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n notePipeline) replaceDB(db *gorm.DB) notePipeline {
	n.notePipelineDo.ReplaceDB(db)
	return n
}

type notePipelineDo struct{ gen.DO }

type INotePipelineDo interface {
	gen.SubQuery
	Debug() INotePipelineDo
	WithContext(ctx context.Context) INotePipelineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INotePipelineDo
	WriteDB() INotePipelineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INotePipelineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INotePipelineDo
	Not(conds ...gen.Condition) INotePipelineDo
	Or(conds ...gen.Condition) INotePipelineDo
	Select(conds ...field.Expr) INotePipelineDo
	Where(conds ...gen.Condition) INotePipelineDo
	Order(conds ...field.Expr) INotePipelineDo
	Distinct(cols ...field.Expr) INotePipelineDo
	Omit(cols ...field.Expr) INotePipelineDo
	Join(table schema.Tabler, on ...field.Expr) INotePipelineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INotePipelineDo
	RightJoin(table schema.Tabler, on ...field.Expr) INotePipelineDo
	Group(cols ...field.Expr) INotePipelineDo
	Having(conds ...gen.Condition) INotePipelineDo
	Limit(limit int) INotePipelineDo
	Offset(offset int) INotePipelineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INotePipelineDo
	Unscoped() INotePipelineDo
	Create(values ...*model.NotePipeline) error
	CreateInBatches(values []*model.NotePipeline, batchSize int) error
	Save(values ...*model.NotePipeline) error
	First() (*model.NotePipeline, error)
	Take() (*model.NotePipeline, error)
	Last() (*model.NotePipeline, error)
	Find() ([]*model.NotePipeline, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotePipeline, err error)
	FindInBatches(result *[]*model.NotePipeline, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NotePipeline) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INotePipelineDo
	Assign(attrs ...field.AssignExpr) INotePipelineDo
	Joins(fields ...field.RelationField) INotePipelineDo
	Preload(fields ...field.RelationField) INotePipelineDo
	FirstOrInit() (*model.NotePipeline, error)
	FirstOrCreate() (*model.NotePipeline, error)
	FindByPage(offset int, limit int) (result []*model.NotePipeline, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INotePipelineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n notePipelineDo) Debug() INotePipelineDo {
	return n.withDO(n.DO.Debug())
}

func (n notePipelineDo) WithContext(ctx context.Context) INotePipelineDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n notePipelineDo) ReadDB() INotePipelineDo {
	return n.Clauses(dbresolver.Read)
}

func (n notePipelineDo) WriteDB() INotePipelineDo {
	return n.Clauses(dbresolver.Write)
}

func (n notePipelineDo) Session(config *gorm.Session) INotePipelineDo {
	return n.withDO(n.DO.Session(config))
}

func (n notePipelineDo) Clauses(conds ...clause.Expression) INotePipelineDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n notePipelineDo) Returning(value interface{}, columns ...string) INotePipelineDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n notePipelineDo) Not(conds ...gen.Condition) INotePipelineDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n notePipelineDo) Or(conds ...gen.Condition) INotePipelineDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n notePipelineDo) Select(conds ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n notePipelineDo) Where(conds ...gen.Condition) INotePipelineDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n notePipelineDo) Order(conds ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n notePipelineDo) Distinct(cols ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n notePipelineDo) Omit(cols ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n notePipelineDo) Join(table schema.Tabler, on ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n notePipelineDo) LeftJoin(table schema.Tabler, on ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n notePipelineDo) RightJoin(table schema.Tabler, on ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n notePipelineDo) Group(cols ...field.Expr) INotePipelineDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n notePipelineDo) Having(conds ...gen.Condition) INotePipelineDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n notePipelineDo) Limit(limit int) INotePipelineDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n notePipelineDo) Offset(offset int) INotePipelineDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n notePipelineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INotePipelineDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n notePipelineDo) Unscoped() INotePipelineDo {
	return n.withDO(n.DO.Unscoped())
}

func (n notePipelineDo) Create(values ...*model.NotePipeline) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n notePipelineDo) CreateInBatches(values []*model.NotePipeline, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n notePipelineDo) Save(values ...*model.NotePipeline) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n notePipelineDo) First() (*model.NotePipeline, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotePipeline), nil
	}
}

func (n notePipelineDo) Take() (*model.NotePipeline, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotePipeline), nil
	}
}

func (n notePipelineDo) Last() (*model.NotePipeline, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotePipeline), nil
	}
}

func (n notePipelineDo) Find() ([]*model.NotePipeline, error) {
	result, err := n.DO.Find()
	return result.([]*model.NotePipeline), err
}

func (n notePipelineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NotePipeline, err error) {
	buf := make([]*model.NotePipeline, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n notePipelineDo) FindInBatches(result *[]*model.NotePipeline, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n notePipelineDo) Attrs(attrs ...field.AssignExpr) INotePipelineDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n notePipelineDo) Assign(attrs ...field.AssignExpr) INotePipelineDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n notePipelineDo) Joins(fields ...field.RelationField) INotePipelineDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n notePipelineDo) Preload(fields ...field.RelationField) INotePipelineDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n notePipelineDo) FirstOrInit() (*model.NotePipeline, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotePipeline), nil
	}
}

func (n notePipelineDo) FirstOrCreate() (*model.NotePipeline, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NotePipeline), nil
	}
}

func (n notePipelineDo) FindByPage(offset int, limit int) (result []*model.NotePipeline, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n notePipelineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n notePipelineDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n notePipelineDo) Delete(models ...*model.NotePipeline) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *notePipelineDo) withDO(do gen.Dao) *notePipelineDo {
	n.DO = *do.(*gen.DO)
	return n
}
