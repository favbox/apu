// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newWeixinMp(db *gorm.DB, opts ...gen.DOOption) weixinMp {
	_weixinMp := weixinMp{}

	_weixinMp.weixinMpDo.UseDB(db, opts...)
	_weixinMp.weixinMpDo.UseModel(&model.WeixinMp{})

	tableName := _weixinMp.weixinMpDo.TableName()
	_weixinMp.ALL = field.NewAsterisk(tableName)
	_weixinMp.ID = field.NewInt64(tableName, "id")
	_weixinMp.UID = field.NewInt64(tableName, "uid")
	_weixinMp.AuthorID = field.NewInt64(tableName, "author_id")
	_weixinMp.Biz = field.NewString(tableName, "biz")
	_weixinMp.Name = field.NewString(tableName, "name")
	_weixinMp.Avatar = field.NewString(tableName, "avatar")
	_weixinMp.LastPublishTime = field.NewTime(tableName, "last_publish_time")
	_weixinMp.CreateTime = field.NewTime(tableName, "create_time")
	_weixinMp.UpdateTime = field.NewTime(tableName, "update_time")

	_weixinMp.fillFieldMap()

	return _weixinMp
}

type weixinMp struct {
	weixinMpDo

	ALL             field.Asterisk
	ID              field.Int64
	UID             field.Int64
	AuthorID        field.Int64
	Biz             field.String
	Name            field.String
	Avatar          field.String
	LastPublishTime field.Time
	CreateTime      field.Time
	UpdateTime      field.Time

	fieldMap map[string]field.Expr
}

func (w weixinMp) Table(newTableName string) *weixinMp {
	w.weixinMpDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w weixinMp) As(alias string) *weixinMp {
	w.weixinMpDo.DO = *(w.weixinMpDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *weixinMp) updateTableName(table string) *weixinMp {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.AuthorID = field.NewInt64(table, "author_id")
	w.Biz = field.NewString(table, "biz")
	w.Name = field.NewString(table, "name")
	w.Avatar = field.NewString(table, "avatar")
	w.LastPublishTime = field.NewTime(table, "last_publish_time")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")

	w.fillFieldMap()

	return w
}

func (w *weixinMp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *weixinMp) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["author_id"] = w.AuthorID
	w.fieldMap["biz"] = w.Biz
	w.fieldMap["name"] = w.Name
	w.fieldMap["avatar"] = w.Avatar
	w.fieldMap["last_publish_time"] = w.LastPublishTime
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
}

func (w weixinMp) clone(db *gorm.DB) weixinMp {
	w.weixinMpDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w weixinMp) replaceDB(db *gorm.DB) weixinMp {
	w.weixinMpDo.ReplaceDB(db)
	return w
}

type weixinMpDo struct{ gen.DO }

type IWeixinMpDo interface {
	gen.SubQuery
	Debug() IWeixinMpDo
	WithContext(ctx context.Context) IWeixinMpDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWeixinMpDo
	WriteDB() IWeixinMpDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWeixinMpDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWeixinMpDo
	Not(conds ...gen.Condition) IWeixinMpDo
	Or(conds ...gen.Condition) IWeixinMpDo
	Select(conds ...field.Expr) IWeixinMpDo
	Where(conds ...gen.Condition) IWeixinMpDo
	Order(conds ...field.Expr) IWeixinMpDo
	Distinct(cols ...field.Expr) IWeixinMpDo
	Omit(cols ...field.Expr) IWeixinMpDo
	Join(table schema.Tabler, on ...field.Expr) IWeixinMpDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWeixinMpDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWeixinMpDo
	Group(cols ...field.Expr) IWeixinMpDo
	Having(conds ...gen.Condition) IWeixinMpDo
	Limit(limit int) IWeixinMpDo
	Offset(offset int) IWeixinMpDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWeixinMpDo
	Unscoped() IWeixinMpDo
	Create(values ...*model.WeixinMp) error
	CreateInBatches(values []*model.WeixinMp, batchSize int) error
	Save(values ...*model.WeixinMp) error
	First() (*model.WeixinMp, error)
	Take() (*model.WeixinMp, error)
	Last() (*model.WeixinMp, error)
	Find() ([]*model.WeixinMp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeixinMp, err error)
	FindInBatches(result *[]*model.WeixinMp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WeixinMp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWeixinMpDo
	Assign(attrs ...field.AssignExpr) IWeixinMpDo
	Joins(fields ...field.RelationField) IWeixinMpDo
	Preload(fields ...field.RelationField) IWeixinMpDo
	FirstOrInit() (*model.WeixinMp, error)
	FirstOrCreate() (*model.WeixinMp, error)
	FindByPage(offset int, limit int) (result []*model.WeixinMp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWeixinMpDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w weixinMpDo) Debug() IWeixinMpDo {
	return w.withDO(w.DO.Debug())
}

func (w weixinMpDo) WithContext(ctx context.Context) IWeixinMpDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w weixinMpDo) ReadDB() IWeixinMpDo {
	return w.Clauses(dbresolver.Read)
}

func (w weixinMpDo) WriteDB() IWeixinMpDo {
	return w.Clauses(dbresolver.Write)
}

func (w weixinMpDo) Session(config *gorm.Session) IWeixinMpDo {
	return w.withDO(w.DO.Session(config))
}

func (w weixinMpDo) Clauses(conds ...clause.Expression) IWeixinMpDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w weixinMpDo) Returning(value interface{}, columns ...string) IWeixinMpDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w weixinMpDo) Not(conds ...gen.Condition) IWeixinMpDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w weixinMpDo) Or(conds ...gen.Condition) IWeixinMpDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w weixinMpDo) Select(conds ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w weixinMpDo) Where(conds ...gen.Condition) IWeixinMpDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w weixinMpDo) Order(conds ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w weixinMpDo) Distinct(cols ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w weixinMpDo) Omit(cols ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w weixinMpDo) Join(table schema.Tabler, on ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w weixinMpDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w weixinMpDo) RightJoin(table schema.Tabler, on ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w weixinMpDo) Group(cols ...field.Expr) IWeixinMpDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w weixinMpDo) Having(conds ...gen.Condition) IWeixinMpDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w weixinMpDo) Limit(limit int) IWeixinMpDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w weixinMpDo) Offset(offset int) IWeixinMpDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w weixinMpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWeixinMpDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w weixinMpDo) Unscoped() IWeixinMpDo {
	return w.withDO(w.DO.Unscoped())
}

func (w weixinMpDo) Create(values ...*model.WeixinMp) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w weixinMpDo) CreateInBatches(values []*model.WeixinMp, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w weixinMpDo) Save(values ...*model.WeixinMp) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w weixinMpDo) First() (*model.WeixinMp, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinMp), nil
	}
}

func (w weixinMpDo) Take() (*model.WeixinMp, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinMp), nil
	}
}

func (w weixinMpDo) Last() (*model.WeixinMp, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinMp), nil
	}
}

func (w weixinMpDo) Find() ([]*model.WeixinMp, error) {
	result, err := w.DO.Find()
	return result.([]*model.WeixinMp), err
}

func (w weixinMpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeixinMp, err error) {
	buf := make([]*model.WeixinMp, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w weixinMpDo) FindInBatches(result *[]*model.WeixinMp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w weixinMpDo) Attrs(attrs ...field.AssignExpr) IWeixinMpDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w weixinMpDo) Assign(attrs ...field.AssignExpr) IWeixinMpDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w weixinMpDo) Joins(fields ...field.RelationField) IWeixinMpDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w weixinMpDo) Preload(fields ...field.RelationField) IWeixinMpDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w weixinMpDo) FirstOrInit() (*model.WeixinMp, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinMp), nil
	}
}

func (w weixinMpDo) FirstOrCreate() (*model.WeixinMp, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeixinMp), nil
	}
}

func (w weixinMpDo) FindByPage(offset int, limit int) (result []*model.WeixinMp, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w weixinMpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w weixinMpDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w weixinMpDo) Delete(models ...*model.WeixinMp) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *weixinMpDo) withDO(do gen.Dao) *weixinMpDo {
	w.DO = *do.(*gen.DO)
	return w
}
