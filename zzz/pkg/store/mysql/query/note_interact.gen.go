// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newNoteInteract(db *gorm.DB, opts ...gen.DOOption) noteInteract {
	_noteInteract := noteInteract{}

	_noteInteract.noteInteractDo.UseDB(db, opts...)
	_noteInteract.noteInteractDo.UseModel(&model.NoteInteract{})

	tableName := _noteInteract.noteInteractDo.TableName()
	_noteInteract.ALL = field.NewAsterisk(tableName)
	_noteInteract.ID = field.NewInt64(tableName, "id")
	_noteInteract.NoteID = field.NewUint64(tableName, "note_id")
	_noteInteract.Day = field.NewInt(tableName, "day")
	_noteInteract.ReadCount = field.NewInt(tableName, "read_count")
	_noteInteract.LikedCount = field.NewInt(tableName, "liked_count")
	_noteInteract.CollectedCount = field.NewInt(tableName, "collected_count")
	_noteInteract.CommentCount = field.NewInt(tableName, "comment_count")
	_noteInteract.ShareCount = field.NewInt(tableName, "share_count")
	_noteInteract.CreateTime = field.NewTime(tableName, "create_time")

	_noteInteract.fillFieldMap()

	return _noteInteract
}

type noteInteract struct {
	noteInteractDo

	ALL            field.Asterisk
	ID             field.Int64
	NoteID         field.Uint64
	Day            field.Int
	ReadCount      field.Int // 阅读量
	LikedCount     field.Int // 点赞量
	CollectedCount field.Int // 收藏量
	CommentCount   field.Int // 评论量
	ShareCount     field.Int // 分享量
	CreateTime     field.Time

	fieldMap map[string]field.Expr
}

func (n noteInteract) Table(newTableName string) *noteInteract {
	n.noteInteractDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n noteInteract) As(alias string) *noteInteract {
	n.noteInteractDo.DO = *(n.noteInteractDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *noteInteract) updateTableName(table string) *noteInteract {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.NoteID = field.NewUint64(table, "note_id")
	n.Day = field.NewInt(table, "day")
	n.ReadCount = field.NewInt(table, "read_count")
	n.LikedCount = field.NewInt(table, "liked_count")
	n.CollectedCount = field.NewInt(table, "collected_count")
	n.CommentCount = field.NewInt(table, "comment_count")
	n.ShareCount = field.NewInt(table, "share_count")
	n.CreateTime = field.NewTime(table, "create_time")

	n.fillFieldMap()

	return n
}

func (n *noteInteract) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *noteInteract) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 9)
	n.fieldMap["id"] = n.ID
	n.fieldMap["note_id"] = n.NoteID
	n.fieldMap["day"] = n.Day
	n.fieldMap["read_count"] = n.ReadCount
	n.fieldMap["liked_count"] = n.LikedCount
	n.fieldMap["collected_count"] = n.CollectedCount
	n.fieldMap["comment_count"] = n.CommentCount
	n.fieldMap["share_count"] = n.ShareCount
	n.fieldMap["create_time"] = n.CreateTime
}

func (n noteInteract) clone(db *gorm.DB) noteInteract {
	n.noteInteractDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n noteInteract) replaceDB(db *gorm.DB) noteInteract {
	n.noteInteractDo.ReplaceDB(db)
	return n
}

type noteInteractDo struct{ gen.DO }

type INoteInteractDo interface {
	gen.SubQuery
	Debug() INoteInteractDo
	WithContext(ctx context.Context) INoteInteractDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INoteInteractDo
	WriteDB() INoteInteractDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INoteInteractDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INoteInteractDo
	Not(conds ...gen.Condition) INoteInteractDo
	Or(conds ...gen.Condition) INoteInteractDo
	Select(conds ...field.Expr) INoteInteractDo
	Where(conds ...gen.Condition) INoteInteractDo
	Order(conds ...field.Expr) INoteInteractDo
	Distinct(cols ...field.Expr) INoteInteractDo
	Omit(cols ...field.Expr) INoteInteractDo
	Join(table schema.Tabler, on ...field.Expr) INoteInteractDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INoteInteractDo
	RightJoin(table schema.Tabler, on ...field.Expr) INoteInteractDo
	Group(cols ...field.Expr) INoteInteractDo
	Having(conds ...gen.Condition) INoteInteractDo
	Limit(limit int) INoteInteractDo
	Offset(offset int) INoteInteractDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INoteInteractDo
	Unscoped() INoteInteractDo
	Create(values ...*model.NoteInteract) error
	CreateInBatches(values []*model.NoteInteract, batchSize int) error
	Save(values ...*model.NoteInteract) error
	First() (*model.NoteInteract, error)
	Take() (*model.NoteInteract, error)
	Last() (*model.NoteInteract, error)
	Find() ([]*model.NoteInteract, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteInteract, err error)
	FindInBatches(result *[]*model.NoteInteract, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NoteInteract) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INoteInteractDo
	Assign(attrs ...field.AssignExpr) INoteInteractDo
	Joins(fields ...field.RelationField) INoteInteractDo
	Preload(fields ...field.RelationField) INoteInteractDo
	FirstOrInit() (*model.NoteInteract, error)
	FirstOrCreate() (*model.NoteInteract, error)
	FindByPage(offset int, limit int) (result []*model.NoteInteract, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INoteInteractDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n noteInteractDo) Debug() INoteInteractDo {
	return n.withDO(n.DO.Debug())
}

func (n noteInteractDo) WithContext(ctx context.Context) INoteInteractDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n noteInteractDo) ReadDB() INoteInteractDo {
	return n.Clauses(dbresolver.Read)
}

func (n noteInteractDo) WriteDB() INoteInteractDo {
	return n.Clauses(dbresolver.Write)
}

func (n noteInteractDo) Session(config *gorm.Session) INoteInteractDo {
	return n.withDO(n.DO.Session(config))
}

func (n noteInteractDo) Clauses(conds ...clause.Expression) INoteInteractDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n noteInteractDo) Returning(value interface{}, columns ...string) INoteInteractDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n noteInteractDo) Not(conds ...gen.Condition) INoteInteractDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n noteInteractDo) Or(conds ...gen.Condition) INoteInteractDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n noteInteractDo) Select(conds ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n noteInteractDo) Where(conds ...gen.Condition) INoteInteractDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n noteInteractDo) Order(conds ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n noteInteractDo) Distinct(cols ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n noteInteractDo) Omit(cols ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n noteInteractDo) Join(table schema.Tabler, on ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n noteInteractDo) LeftJoin(table schema.Tabler, on ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n noteInteractDo) RightJoin(table schema.Tabler, on ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n noteInteractDo) Group(cols ...field.Expr) INoteInteractDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n noteInteractDo) Having(conds ...gen.Condition) INoteInteractDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n noteInteractDo) Limit(limit int) INoteInteractDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n noteInteractDo) Offset(offset int) INoteInteractDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n noteInteractDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INoteInteractDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n noteInteractDo) Unscoped() INoteInteractDo {
	return n.withDO(n.DO.Unscoped())
}

func (n noteInteractDo) Create(values ...*model.NoteInteract) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n noteInteractDo) CreateInBatches(values []*model.NoteInteract, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n noteInteractDo) Save(values ...*model.NoteInteract) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n noteInteractDo) First() (*model.NoteInteract, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteInteract), nil
	}
}

func (n noteInteractDo) Take() (*model.NoteInteract, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteInteract), nil
	}
}

func (n noteInteractDo) Last() (*model.NoteInteract, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteInteract), nil
	}
}

func (n noteInteractDo) Find() ([]*model.NoteInteract, error) {
	result, err := n.DO.Find()
	return result.([]*model.NoteInteract), err
}

func (n noteInteractDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteInteract, err error) {
	buf := make([]*model.NoteInteract, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n noteInteractDo) FindInBatches(result *[]*model.NoteInteract, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n noteInteractDo) Attrs(attrs ...field.AssignExpr) INoteInteractDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n noteInteractDo) Assign(attrs ...field.AssignExpr) INoteInteractDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n noteInteractDo) Joins(fields ...field.RelationField) INoteInteractDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n noteInteractDo) Preload(fields ...field.RelationField) INoteInteractDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n noteInteractDo) FirstOrInit() (*model.NoteInteract, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteInteract), nil
	}
}

func (n noteInteractDo) FirstOrCreate() (*model.NoteInteract, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteInteract), nil
	}
}

func (n noteInteractDo) FindByPage(offset int, limit int) (result []*model.NoteInteract, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n noteInteractDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n noteInteractDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n noteInteractDo) Delete(models ...*model.NoteInteract) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *noteInteractDo) withDO(do gen.Dao) *noteInteractDo {
	n.DO = *do.(*gen.DO)
	return n
}
