// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newWechatCookie(db *gorm.DB, opts ...gen.DOOption) wechatCookie {
	_wechatCookie := wechatCookie{}

	_wechatCookie.wechatCookieDo.UseDB(db, opts...)
	_wechatCookie.wechatCookieDo.UseModel(&model.WechatCookie{})

	tableName := _wechatCookie.wechatCookieDo.TableName()
	_wechatCookie.ALL = field.NewAsterisk(tableName)
	_wechatCookie.ID = field.NewInt32(tableName, "id")
	_wechatCookie.Wxuin = field.NewString(tableName, "wxuin")
	_wechatCookie.Type = field.NewString(tableName, "type")
	_wechatCookie.Cookie = field.NewString(tableName, "cookie")
	_wechatCookie.Status = field.NewString(tableName, "status")
	_wechatCookie.CreateTime = field.NewTime(tableName, "create_time")

	_wechatCookie.fillFieldMap()

	return _wechatCookie
}

type wechatCookie struct {
	wechatCookieDo

	ALL        field.Asterisk
	ID         field.Int32
	Wxuin      field.String
	Type       field.String
	Cookie     field.String
	Status     field.String
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (w wechatCookie) Table(newTableName string) *wechatCookie {
	w.wechatCookieDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wechatCookie) As(alias string) *wechatCookie {
	w.wechatCookieDo.DO = *(w.wechatCookieDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wechatCookie) updateTableName(table string) *wechatCookie {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Wxuin = field.NewString(table, "wxuin")
	w.Type = field.NewString(table, "type")
	w.Cookie = field.NewString(table, "cookie")
	w.Status = field.NewString(table, "status")
	w.CreateTime = field.NewTime(table, "create_time")

	w.fillFieldMap()

	return w
}

func (w *wechatCookie) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wechatCookie) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["wxuin"] = w.Wxuin
	w.fieldMap["type"] = w.Type
	w.fieldMap["cookie"] = w.Cookie
	w.fieldMap["status"] = w.Status
	w.fieldMap["create_time"] = w.CreateTime
}

func (w wechatCookie) clone(db *gorm.DB) wechatCookie {
	w.wechatCookieDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wechatCookie) replaceDB(db *gorm.DB) wechatCookie {
	w.wechatCookieDo.ReplaceDB(db)
	return w
}

type wechatCookieDo struct{ gen.DO }

type IWechatCookieDo interface {
	gen.SubQuery
	Debug() IWechatCookieDo
	WithContext(ctx context.Context) IWechatCookieDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWechatCookieDo
	WriteDB() IWechatCookieDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWechatCookieDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWechatCookieDo
	Not(conds ...gen.Condition) IWechatCookieDo
	Or(conds ...gen.Condition) IWechatCookieDo
	Select(conds ...field.Expr) IWechatCookieDo
	Where(conds ...gen.Condition) IWechatCookieDo
	Order(conds ...field.Expr) IWechatCookieDo
	Distinct(cols ...field.Expr) IWechatCookieDo
	Omit(cols ...field.Expr) IWechatCookieDo
	Join(table schema.Tabler, on ...field.Expr) IWechatCookieDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWechatCookieDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWechatCookieDo
	Group(cols ...field.Expr) IWechatCookieDo
	Having(conds ...gen.Condition) IWechatCookieDo
	Limit(limit int) IWechatCookieDo
	Offset(offset int) IWechatCookieDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatCookieDo
	Unscoped() IWechatCookieDo
	Create(values ...*model.WechatCookie) error
	CreateInBatches(values []*model.WechatCookie, batchSize int) error
	Save(values ...*model.WechatCookie) error
	First() (*model.WechatCookie, error)
	Take() (*model.WechatCookie, error)
	Last() (*model.WechatCookie, error)
	Find() ([]*model.WechatCookie, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatCookie, err error)
	FindInBatches(result *[]*model.WechatCookie, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WechatCookie) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWechatCookieDo
	Assign(attrs ...field.AssignExpr) IWechatCookieDo
	Joins(fields ...field.RelationField) IWechatCookieDo
	Preload(fields ...field.RelationField) IWechatCookieDo
	FirstOrInit() (*model.WechatCookie, error)
	FirstOrCreate() (*model.WechatCookie, error)
	FindByPage(offset int, limit int) (result []*model.WechatCookie, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWechatCookieDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wechatCookieDo) Debug() IWechatCookieDo {
	return w.withDO(w.DO.Debug())
}

func (w wechatCookieDo) WithContext(ctx context.Context) IWechatCookieDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wechatCookieDo) ReadDB() IWechatCookieDo {
	return w.Clauses(dbresolver.Read)
}

func (w wechatCookieDo) WriteDB() IWechatCookieDo {
	return w.Clauses(dbresolver.Write)
}

func (w wechatCookieDo) Session(config *gorm.Session) IWechatCookieDo {
	return w.withDO(w.DO.Session(config))
}

func (w wechatCookieDo) Clauses(conds ...clause.Expression) IWechatCookieDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wechatCookieDo) Returning(value interface{}, columns ...string) IWechatCookieDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wechatCookieDo) Not(conds ...gen.Condition) IWechatCookieDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wechatCookieDo) Or(conds ...gen.Condition) IWechatCookieDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wechatCookieDo) Select(conds ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wechatCookieDo) Where(conds ...gen.Condition) IWechatCookieDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wechatCookieDo) Order(conds ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wechatCookieDo) Distinct(cols ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wechatCookieDo) Omit(cols ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wechatCookieDo) Join(table schema.Tabler, on ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wechatCookieDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wechatCookieDo) RightJoin(table schema.Tabler, on ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wechatCookieDo) Group(cols ...field.Expr) IWechatCookieDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wechatCookieDo) Having(conds ...gen.Condition) IWechatCookieDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wechatCookieDo) Limit(limit int) IWechatCookieDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wechatCookieDo) Offset(offset int) IWechatCookieDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wechatCookieDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatCookieDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wechatCookieDo) Unscoped() IWechatCookieDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wechatCookieDo) Create(values ...*model.WechatCookie) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wechatCookieDo) CreateInBatches(values []*model.WechatCookie, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wechatCookieDo) Save(values ...*model.WechatCookie) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wechatCookieDo) First() (*model.WechatCookie, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCookie), nil
	}
}

func (w wechatCookieDo) Take() (*model.WechatCookie, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCookie), nil
	}
}

func (w wechatCookieDo) Last() (*model.WechatCookie, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCookie), nil
	}
}

func (w wechatCookieDo) Find() ([]*model.WechatCookie, error) {
	result, err := w.DO.Find()
	return result.([]*model.WechatCookie), err
}

func (w wechatCookieDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatCookie, err error) {
	buf := make([]*model.WechatCookie, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wechatCookieDo) FindInBatches(result *[]*model.WechatCookie, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wechatCookieDo) Attrs(attrs ...field.AssignExpr) IWechatCookieDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wechatCookieDo) Assign(attrs ...field.AssignExpr) IWechatCookieDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wechatCookieDo) Joins(fields ...field.RelationField) IWechatCookieDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wechatCookieDo) Preload(fields ...field.RelationField) IWechatCookieDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wechatCookieDo) FirstOrInit() (*model.WechatCookie, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCookie), nil
	}
}

func (w wechatCookieDo) FirstOrCreate() (*model.WechatCookie, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCookie), nil
	}
}

func (w wechatCookieDo) FindByPage(offset int, limit int) (result []*model.WechatCookie, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wechatCookieDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wechatCookieDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wechatCookieDo) Delete(models ...*model.WechatCookie) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wechatCookieDo) withDO(do gen.Dao) *wechatCookieDo {
	w.DO = *do.(*gen.DO)
	return w
}
