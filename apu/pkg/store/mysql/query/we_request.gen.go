// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newWeRequest(db *gorm.DB, opts ...gen.DOOption) weRequest {
	_weRequest := weRequest{}

	_weRequest.weRequestDo.UseDB(db, opts...)
	_weRequest.weRequestDo.UseModel(&model.WeRequest{})

	tableName := _weRequest.weRequestDo.TableName()
	_weRequest.ALL = field.NewAsterisk(tableName)
	_weRequest.ID = field.NewInt32(tableName, "id")
	_weRequest.UserID = field.NewString(tableName, "user_id")
	_weRequest.Type = field.NewString(tableName, "type")
	_weRequest.Headers = field.NewString(tableName, "headers")
	_weRequest.Cookie = field.NewString(tableName, "cookie")
	_weRequest.Status = field.NewString(tableName, "status")
	_weRequest.CreateTime = field.NewTime(tableName, "create_time")

	_weRequest.fillFieldMap()

	return _weRequest
}

type weRequest struct {
	weRequestDo

	ALL        field.Asterisk
	ID         field.Int32
	UserID     field.String // weread:vid, wechat:wxuin
	Type       field.String
	Headers    field.String
	Cookie     field.String
	Status     field.String
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (w weRequest) Table(newTableName string) *weRequest {
	w.weRequestDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w weRequest) As(alias string) *weRequest {
	w.weRequestDo.DO = *(w.weRequestDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *weRequest) updateTableName(table string) *weRequest {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.UserID = field.NewString(table, "user_id")
	w.Type = field.NewString(table, "type")
	w.Headers = field.NewString(table, "headers")
	w.Cookie = field.NewString(table, "cookie")
	w.Status = field.NewString(table, "status")
	w.CreateTime = field.NewTime(table, "create_time")

	w.fillFieldMap()

	return w
}

func (w *weRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *weRequest) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["id"] = w.ID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["type"] = w.Type
	w.fieldMap["headers"] = w.Headers
	w.fieldMap["cookie"] = w.Cookie
	w.fieldMap["status"] = w.Status
	w.fieldMap["create_time"] = w.CreateTime
}

func (w weRequest) clone(db *gorm.DB) weRequest {
	w.weRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w weRequest) replaceDB(db *gorm.DB) weRequest {
	w.weRequestDo.ReplaceDB(db)
	return w
}

type weRequestDo struct{ gen.DO }

type IWeRequestDo interface {
	gen.SubQuery
	Debug() IWeRequestDo
	WithContext(ctx context.Context) IWeRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWeRequestDo
	WriteDB() IWeRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWeRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWeRequestDo
	Not(conds ...gen.Condition) IWeRequestDo
	Or(conds ...gen.Condition) IWeRequestDo
	Select(conds ...field.Expr) IWeRequestDo
	Where(conds ...gen.Condition) IWeRequestDo
	Order(conds ...field.Expr) IWeRequestDo
	Distinct(cols ...field.Expr) IWeRequestDo
	Omit(cols ...field.Expr) IWeRequestDo
	Join(table schema.Tabler, on ...field.Expr) IWeRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWeRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWeRequestDo
	Group(cols ...field.Expr) IWeRequestDo
	Having(conds ...gen.Condition) IWeRequestDo
	Limit(limit int) IWeRequestDo
	Offset(offset int) IWeRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWeRequestDo
	Unscoped() IWeRequestDo
	Create(values ...*model.WeRequest) error
	CreateInBatches(values []*model.WeRequest, batchSize int) error
	Save(values ...*model.WeRequest) error
	First() (*model.WeRequest, error)
	Take() (*model.WeRequest, error)
	Last() (*model.WeRequest, error)
	Find() ([]*model.WeRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeRequest, err error)
	FindInBatches(result *[]*model.WeRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WeRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWeRequestDo
	Assign(attrs ...field.AssignExpr) IWeRequestDo
	Joins(fields ...field.RelationField) IWeRequestDo
	Preload(fields ...field.RelationField) IWeRequestDo
	FirstOrInit() (*model.WeRequest, error)
	FirstOrCreate() (*model.WeRequest, error)
	FindByPage(offset int, limit int) (result []*model.WeRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWeRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w weRequestDo) Debug() IWeRequestDo {
	return w.withDO(w.DO.Debug())
}

func (w weRequestDo) WithContext(ctx context.Context) IWeRequestDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w weRequestDo) ReadDB() IWeRequestDo {
	return w.Clauses(dbresolver.Read)
}

func (w weRequestDo) WriteDB() IWeRequestDo {
	return w.Clauses(dbresolver.Write)
}

func (w weRequestDo) Session(config *gorm.Session) IWeRequestDo {
	return w.withDO(w.DO.Session(config))
}

func (w weRequestDo) Clauses(conds ...clause.Expression) IWeRequestDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w weRequestDo) Returning(value interface{}, columns ...string) IWeRequestDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w weRequestDo) Not(conds ...gen.Condition) IWeRequestDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w weRequestDo) Or(conds ...gen.Condition) IWeRequestDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w weRequestDo) Select(conds ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w weRequestDo) Where(conds ...gen.Condition) IWeRequestDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w weRequestDo) Order(conds ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w weRequestDo) Distinct(cols ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w weRequestDo) Omit(cols ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w weRequestDo) Join(table schema.Tabler, on ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w weRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w weRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w weRequestDo) Group(cols ...field.Expr) IWeRequestDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w weRequestDo) Having(conds ...gen.Condition) IWeRequestDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w weRequestDo) Limit(limit int) IWeRequestDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w weRequestDo) Offset(offset int) IWeRequestDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w weRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWeRequestDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w weRequestDo) Unscoped() IWeRequestDo {
	return w.withDO(w.DO.Unscoped())
}

func (w weRequestDo) Create(values ...*model.WeRequest) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w weRequestDo) CreateInBatches(values []*model.WeRequest, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w weRequestDo) Save(values ...*model.WeRequest) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w weRequestDo) First() (*model.WeRequest, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeRequest), nil
	}
}

func (w weRequestDo) Take() (*model.WeRequest, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeRequest), nil
	}
}

func (w weRequestDo) Last() (*model.WeRequest, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeRequest), nil
	}
}

func (w weRequestDo) Find() ([]*model.WeRequest, error) {
	result, err := w.DO.Find()
	return result.([]*model.WeRequest), err
}

func (w weRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WeRequest, err error) {
	buf := make([]*model.WeRequest, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w weRequestDo) FindInBatches(result *[]*model.WeRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w weRequestDo) Attrs(attrs ...field.AssignExpr) IWeRequestDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w weRequestDo) Assign(attrs ...field.AssignExpr) IWeRequestDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w weRequestDo) Joins(fields ...field.RelationField) IWeRequestDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w weRequestDo) Preload(fields ...field.RelationField) IWeRequestDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w weRequestDo) FirstOrInit() (*model.WeRequest, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeRequest), nil
	}
}

func (w weRequestDo) FirstOrCreate() (*model.WeRequest, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WeRequest), nil
	}
}

func (w weRequestDo) FindByPage(offset int, limit int) (result []*model.WeRequest, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w weRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w weRequestDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w weRequestDo) Delete(models ...*model.WeRequest) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *weRequestDo) withDO(do gen.Dao) *weRequestDo {
	w.DO = *do.(*gen.DO)
	return w
}
