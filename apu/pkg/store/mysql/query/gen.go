// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Author       *author
	Category     *category
	Image        *image
	Interact     *interact
	Note         *note
	NoteCategory *noteCategory
	NoteTag      *noteTag
	Tag          *tag
	Video        *video
	WexinRequest *wexinRequest
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Author = &Q.Author
	Category = &Q.Category
	Image = &Q.Image
	Interact = &Q.Interact
	Note = &Q.Note
	NoteCategory = &Q.NoteCategory
	NoteTag = &Q.NoteTag
	Tag = &Q.Tag
	Video = &Q.Video
	WexinRequest = &Q.WexinRequest
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Author:       newAuthor(db, opts...),
		Category:     newCategory(db, opts...),
		Image:        newImage(db, opts...),
		Interact:     newInteract(db, opts...),
		Note:         newNote(db, opts...),
		NoteCategory: newNoteCategory(db, opts...),
		NoteTag:      newNoteTag(db, opts...),
		Tag:          newTag(db, opts...),
		Video:        newVideo(db, opts...),
		WexinRequest: newWexinRequest(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Author       author
	Category     category
	Image        image
	Interact     interact
	Note         note
	NoteCategory noteCategory
	NoteTag      noteTag
	Tag          tag
	Video        video
	WexinRequest wexinRequest
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Author:       q.Author.clone(db),
		Category:     q.Category.clone(db),
		Image:        q.Image.clone(db),
		Interact:     q.Interact.clone(db),
		Note:         q.Note.clone(db),
		NoteCategory: q.NoteCategory.clone(db),
		NoteTag:      q.NoteTag.clone(db),
		Tag:          q.Tag.clone(db),
		Video:        q.Video.clone(db),
		WexinRequest: q.WexinRequest.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Author:       q.Author.replaceDB(db),
		Category:     q.Category.replaceDB(db),
		Image:        q.Image.replaceDB(db),
		Interact:     q.Interact.replaceDB(db),
		Note:         q.Note.replaceDB(db),
		NoteCategory: q.NoteCategory.replaceDB(db),
		NoteTag:      q.NoteTag.replaceDB(db),
		Tag:          q.Tag.replaceDB(db),
		Video:        q.Video.replaceDB(db),
		WexinRequest: q.WexinRequest.replaceDB(db),
	}
}

type queryCtx struct {
	Author       IAuthorDo
	Category     ICategoryDo
	Image        IImageDo
	Interact     IInteractDo
	Note         INoteDo
	NoteCategory INoteCategoryDo
	NoteTag      INoteTagDo
	Tag          ITagDo
	Video        IVideoDo
	WexinRequest IWexinRequestDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Author:       q.Author.WithContext(ctx),
		Category:     q.Category.WithContext(ctx),
		Image:        q.Image.WithContext(ctx),
		Interact:     q.Interact.WithContext(ctx),
		Note:         q.Note.WithContext(ctx),
		NoteCategory: q.NoteCategory.WithContext(ctx),
		NoteTag:      q.NoteTag.WithContext(ctx),
		Tag:          q.Tag.WithContext(ctx),
		Video:        q.Video.WithContext(ctx),
		WexinRequest: q.WexinRequest.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
