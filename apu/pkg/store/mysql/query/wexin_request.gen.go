// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newWexinRequest(db *gorm.DB, opts ...gen.DOOption) wexinRequest {
	_wexinRequest := wexinRequest{}

	_wexinRequest.wexinRequestDo.UseDB(db, opts...)
	_wexinRequest.wexinRequestDo.UseModel(&model.WexinRequest{})

	tableName := _wexinRequest.wexinRequestDo.TableName()
	_wexinRequest.ALL = field.NewAsterisk(tableName)
	_wexinRequest.ID = field.NewInt32(tableName, "id")
	_wexinRequest.Type = field.NewString(tableName, "type")
	_wexinRequest.UserID = field.NewString(tableName, "user_id")
	_wexinRequest.Headers = field.NewString(tableName, "headers")
	_wexinRequest.Cookie = field.NewString(tableName, "cookie")
	_wexinRequest.Status = field.NewString(tableName, "status")
	_wexinRequest.CreateTime = field.NewTime(tableName, "create_time")
	_wexinRequest.UpdateTime = field.NewTime(tableName, "update_time")

	_wexinRequest.fillFieldMap()

	return _wexinRequest
}

type wexinRequest struct {
	wexinRequestDo

	ALL        field.Asterisk
	ID         field.Int32
	Type       field.String
	UserID     field.String // wxuinæˆ–vid
	Headers    field.String
	Cookie     field.String
	Status     field.String
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (w wexinRequest) Table(newTableName string) *wexinRequest {
	w.wexinRequestDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wexinRequest) As(alias string) *wexinRequest {
	w.wexinRequestDo.DO = *(w.wexinRequestDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wexinRequest) updateTableName(table string) *wexinRequest {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt32(table, "id")
	w.Type = field.NewString(table, "type")
	w.UserID = field.NewString(table, "user_id")
	w.Headers = field.NewString(table, "headers")
	w.Cookie = field.NewString(table, "cookie")
	w.Status = field.NewString(table, "status")
	w.CreateTime = field.NewTime(table, "create_time")
	w.UpdateTime = field.NewTime(table, "update_time")

	w.fillFieldMap()

	return w
}

func (w *wexinRequest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wexinRequest) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["type"] = w.Type
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["headers"] = w.Headers
	w.fieldMap["cookie"] = w.Cookie
	w.fieldMap["status"] = w.Status
	w.fieldMap["create_time"] = w.CreateTime
	w.fieldMap["update_time"] = w.UpdateTime
}

func (w wexinRequest) clone(db *gorm.DB) wexinRequest {
	w.wexinRequestDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wexinRequest) replaceDB(db *gorm.DB) wexinRequest {
	w.wexinRequestDo.ReplaceDB(db)
	return w
}

type wexinRequestDo struct{ gen.DO }

type IWexinRequestDo interface {
	gen.SubQuery
	Debug() IWexinRequestDo
	WithContext(ctx context.Context) IWexinRequestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWexinRequestDo
	WriteDB() IWexinRequestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWexinRequestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWexinRequestDo
	Not(conds ...gen.Condition) IWexinRequestDo
	Or(conds ...gen.Condition) IWexinRequestDo
	Select(conds ...field.Expr) IWexinRequestDo
	Where(conds ...gen.Condition) IWexinRequestDo
	Order(conds ...field.Expr) IWexinRequestDo
	Distinct(cols ...field.Expr) IWexinRequestDo
	Omit(cols ...field.Expr) IWexinRequestDo
	Join(table schema.Tabler, on ...field.Expr) IWexinRequestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWexinRequestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWexinRequestDo
	Group(cols ...field.Expr) IWexinRequestDo
	Having(conds ...gen.Condition) IWexinRequestDo
	Limit(limit int) IWexinRequestDo
	Offset(offset int) IWexinRequestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWexinRequestDo
	Unscoped() IWexinRequestDo
	Create(values ...*model.WexinRequest) error
	CreateInBatches(values []*model.WexinRequest, batchSize int) error
	Save(values ...*model.WexinRequest) error
	First() (*model.WexinRequest, error)
	Take() (*model.WexinRequest, error)
	Last() (*model.WexinRequest, error)
	Find() ([]*model.WexinRequest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WexinRequest, err error)
	FindInBatches(result *[]*model.WexinRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WexinRequest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWexinRequestDo
	Assign(attrs ...field.AssignExpr) IWexinRequestDo
	Joins(fields ...field.RelationField) IWexinRequestDo
	Preload(fields ...field.RelationField) IWexinRequestDo
	FirstOrInit() (*model.WexinRequest, error)
	FirstOrCreate() (*model.WexinRequest, error)
	FindByPage(offset int, limit int) (result []*model.WexinRequest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWexinRequestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wexinRequestDo) Debug() IWexinRequestDo {
	return w.withDO(w.DO.Debug())
}

func (w wexinRequestDo) WithContext(ctx context.Context) IWexinRequestDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wexinRequestDo) ReadDB() IWexinRequestDo {
	return w.Clauses(dbresolver.Read)
}

func (w wexinRequestDo) WriteDB() IWexinRequestDo {
	return w.Clauses(dbresolver.Write)
}

func (w wexinRequestDo) Session(config *gorm.Session) IWexinRequestDo {
	return w.withDO(w.DO.Session(config))
}

func (w wexinRequestDo) Clauses(conds ...clause.Expression) IWexinRequestDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wexinRequestDo) Returning(value interface{}, columns ...string) IWexinRequestDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wexinRequestDo) Not(conds ...gen.Condition) IWexinRequestDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wexinRequestDo) Or(conds ...gen.Condition) IWexinRequestDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wexinRequestDo) Select(conds ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wexinRequestDo) Where(conds ...gen.Condition) IWexinRequestDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wexinRequestDo) Order(conds ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wexinRequestDo) Distinct(cols ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wexinRequestDo) Omit(cols ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wexinRequestDo) Join(table schema.Tabler, on ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wexinRequestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wexinRequestDo) RightJoin(table schema.Tabler, on ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wexinRequestDo) Group(cols ...field.Expr) IWexinRequestDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wexinRequestDo) Having(conds ...gen.Condition) IWexinRequestDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wexinRequestDo) Limit(limit int) IWexinRequestDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wexinRequestDo) Offset(offset int) IWexinRequestDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wexinRequestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWexinRequestDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wexinRequestDo) Unscoped() IWexinRequestDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wexinRequestDo) Create(values ...*model.WexinRequest) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wexinRequestDo) CreateInBatches(values []*model.WexinRequest, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wexinRequestDo) Save(values ...*model.WexinRequest) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wexinRequestDo) First() (*model.WexinRequest, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WexinRequest), nil
	}
}

func (w wexinRequestDo) Take() (*model.WexinRequest, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WexinRequest), nil
	}
}

func (w wexinRequestDo) Last() (*model.WexinRequest, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WexinRequest), nil
	}
}

func (w wexinRequestDo) Find() ([]*model.WexinRequest, error) {
	result, err := w.DO.Find()
	return result.([]*model.WexinRequest), err
}

func (w wexinRequestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WexinRequest, err error) {
	buf := make([]*model.WexinRequest, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wexinRequestDo) FindInBatches(result *[]*model.WexinRequest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wexinRequestDo) Attrs(attrs ...field.AssignExpr) IWexinRequestDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wexinRequestDo) Assign(attrs ...field.AssignExpr) IWexinRequestDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wexinRequestDo) Joins(fields ...field.RelationField) IWexinRequestDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wexinRequestDo) Preload(fields ...field.RelationField) IWexinRequestDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wexinRequestDo) FirstOrInit() (*model.WexinRequest, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WexinRequest), nil
	}
}

func (w wexinRequestDo) FirstOrCreate() (*model.WexinRequest, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WexinRequest), nil
	}
}

func (w wexinRequestDo) FindByPage(offset int, limit int) (result []*model.WexinRequest, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wexinRequestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wexinRequestDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wexinRequestDo) Delete(models ...*model.WexinRequest) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wexinRequestDo) withDO(do gen.Dao) *wexinRequestDo {
	w.DO = *do.(*gen.DO)
	return w
}
