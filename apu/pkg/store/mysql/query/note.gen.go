// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newNote(db *gorm.DB, opts ...gen.DOOption) note {
	_note := note{}

	_note.noteDo.UseDB(db, opts...)
	_note.noteDo.UseModel(&model.Note{})

	tableName := _note.noteDo.TableName()
	_note.ALL = field.NewAsterisk(tableName)
	_note.ID = field.NewInt64(tableName, "id")
	_note.UID = field.NewUint64(tableName, "uid")
	_note.Source = field.NewInt32(tableName, "source")
	_note.State = field.NewInt32(tableName, "state")
	_note.Type = field.NewString(tableName, "type")
	_note.PublishTime = field.NewTime(tableName, "publish_time")
	_note.Title = field.NewString(tableName, "title")
	_note.ReadCount = field.NewInt32(tableName, "read_count")
	_note.LikedCount = field.NewInt32(tableName, "liked_count")
	_note.CollectedCount = field.NewInt32(tableName, "collected_count")
	_note.CommentCount = field.NewInt32(tableName, "comment_count")
	_note.ShareCount = field.NewInt32(tableName, "share_count")
	_note.Content = field.NewString(tableName, "content")
	_note.AuthorID = field.NewInt64(tableName, "author_id")
	_note.OriginalURL = field.NewString(tableName, "original_url")
	_note.CreateTime = field.NewTime(tableName, "create_time")
	_note.UpdateTime = field.NewTime(tableName, "update_time")

	_note.fillFieldMap()

	return _note
}

type note struct {
	noteDo

	ALL            field.Asterisk
	ID             field.Int64
	UID            field.Uint64
	Source         field.Int32
	State          field.Int32
	Type           field.String
	PublishTime    field.Time
	Title          field.String
	ReadCount      field.Int32
	LikedCount     field.Int32
	CollectedCount field.Int32
	CommentCount   field.Int32
	ShareCount     field.Int32
	Content        field.String
	AuthorID       field.Int64
	OriginalURL    field.String
	CreateTime     field.Time
	UpdateTime     field.Time

	fieldMap map[string]field.Expr
}

func (n note) Table(newTableName string) *note {
	n.noteDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n note) As(alias string) *note {
	n.noteDo.DO = *(n.noteDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *note) updateTableName(table string) *note {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.UID = field.NewUint64(table, "uid")
	n.Source = field.NewInt32(table, "source")
	n.State = field.NewInt32(table, "state")
	n.Type = field.NewString(table, "type")
	n.PublishTime = field.NewTime(table, "publish_time")
	n.Title = field.NewString(table, "title")
	n.ReadCount = field.NewInt32(table, "read_count")
	n.LikedCount = field.NewInt32(table, "liked_count")
	n.CollectedCount = field.NewInt32(table, "collected_count")
	n.CommentCount = field.NewInt32(table, "comment_count")
	n.ShareCount = field.NewInt32(table, "share_count")
	n.Content = field.NewString(table, "content")
	n.AuthorID = field.NewInt64(table, "author_id")
	n.OriginalURL = field.NewString(table, "original_url")
	n.CreateTime = field.NewTime(table, "create_time")
	n.UpdateTime = field.NewTime(table, "update_time")

	n.fillFieldMap()

	return n
}

func (n *note) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *note) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 17)
	n.fieldMap["id"] = n.ID
	n.fieldMap["uid"] = n.UID
	n.fieldMap["source"] = n.Source
	n.fieldMap["state"] = n.State
	n.fieldMap["type"] = n.Type
	n.fieldMap["publish_time"] = n.PublishTime
	n.fieldMap["title"] = n.Title
	n.fieldMap["read_count"] = n.ReadCount
	n.fieldMap["liked_count"] = n.LikedCount
	n.fieldMap["collected_count"] = n.CollectedCount
	n.fieldMap["comment_count"] = n.CommentCount
	n.fieldMap["share_count"] = n.ShareCount
	n.fieldMap["content"] = n.Content
	n.fieldMap["author_id"] = n.AuthorID
	n.fieldMap["original_url"] = n.OriginalURL
	n.fieldMap["create_time"] = n.CreateTime
	n.fieldMap["update_time"] = n.UpdateTime
}

func (n note) clone(db *gorm.DB) note {
	n.noteDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n note) replaceDB(db *gorm.DB) note {
	n.noteDo.ReplaceDB(db)
	return n
}

type noteDo struct{ gen.DO }

type INoteDo interface {
	gen.SubQuery
	Debug() INoteDo
	WithContext(ctx context.Context) INoteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INoteDo
	WriteDB() INoteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INoteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INoteDo
	Not(conds ...gen.Condition) INoteDo
	Or(conds ...gen.Condition) INoteDo
	Select(conds ...field.Expr) INoteDo
	Where(conds ...gen.Condition) INoteDo
	Order(conds ...field.Expr) INoteDo
	Distinct(cols ...field.Expr) INoteDo
	Omit(cols ...field.Expr) INoteDo
	Join(table schema.Tabler, on ...field.Expr) INoteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INoteDo
	RightJoin(table schema.Tabler, on ...field.Expr) INoteDo
	Group(cols ...field.Expr) INoteDo
	Having(conds ...gen.Condition) INoteDo
	Limit(limit int) INoteDo
	Offset(offset int) INoteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INoteDo
	Unscoped() INoteDo
	Create(values ...*model.Note) error
	CreateInBatches(values []*model.Note, batchSize int) error
	Save(values ...*model.Note) error
	First() (*model.Note, error)
	Take() (*model.Note, error)
	Last() (*model.Note, error)
	Find() ([]*model.Note, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Note, err error)
	FindInBatches(result *[]*model.Note, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Note) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INoteDo
	Assign(attrs ...field.AssignExpr) INoteDo
	Joins(fields ...field.RelationField) INoteDo
	Preload(fields ...field.RelationField) INoteDo
	FirstOrInit() (*model.Note, error)
	FirstOrCreate() (*model.Note, error)
	FindByPage(offset int, limit int) (result []*model.Note, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INoteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n noteDo) Debug() INoteDo {
	return n.withDO(n.DO.Debug())
}

func (n noteDo) WithContext(ctx context.Context) INoteDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n noteDo) ReadDB() INoteDo {
	return n.Clauses(dbresolver.Read)
}

func (n noteDo) WriteDB() INoteDo {
	return n.Clauses(dbresolver.Write)
}

func (n noteDo) Session(config *gorm.Session) INoteDo {
	return n.withDO(n.DO.Session(config))
}

func (n noteDo) Clauses(conds ...clause.Expression) INoteDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n noteDo) Returning(value interface{}, columns ...string) INoteDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n noteDo) Not(conds ...gen.Condition) INoteDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n noteDo) Or(conds ...gen.Condition) INoteDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n noteDo) Select(conds ...field.Expr) INoteDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n noteDo) Where(conds ...gen.Condition) INoteDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n noteDo) Order(conds ...field.Expr) INoteDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n noteDo) Distinct(cols ...field.Expr) INoteDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n noteDo) Omit(cols ...field.Expr) INoteDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n noteDo) Join(table schema.Tabler, on ...field.Expr) INoteDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n noteDo) LeftJoin(table schema.Tabler, on ...field.Expr) INoteDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n noteDo) RightJoin(table schema.Tabler, on ...field.Expr) INoteDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n noteDo) Group(cols ...field.Expr) INoteDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n noteDo) Having(conds ...gen.Condition) INoteDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n noteDo) Limit(limit int) INoteDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n noteDo) Offset(offset int) INoteDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n noteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INoteDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n noteDo) Unscoped() INoteDo {
	return n.withDO(n.DO.Unscoped())
}

func (n noteDo) Create(values ...*model.Note) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n noteDo) CreateInBatches(values []*model.Note, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n noteDo) Save(values ...*model.Note) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n noteDo) First() (*model.Note, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) Take() (*model.Note, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) Last() (*model.Note, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) Find() ([]*model.Note, error) {
	result, err := n.DO.Find()
	return result.([]*model.Note), err
}

func (n noteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Note, err error) {
	buf := make([]*model.Note, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n noteDo) FindInBatches(result *[]*model.Note, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n noteDo) Attrs(attrs ...field.AssignExpr) INoteDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n noteDo) Assign(attrs ...field.AssignExpr) INoteDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n noteDo) Joins(fields ...field.RelationField) INoteDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n noteDo) Preload(fields ...field.RelationField) INoteDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n noteDo) FirstOrInit() (*model.Note, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) FirstOrCreate() (*model.Note, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Note), nil
	}
}

func (n noteDo) FindByPage(offset int, limit int) (result []*model.Note, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n noteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n noteDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n noteDo) Delete(models ...*model.Note) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *noteDo) withDO(do gen.Dao) *noteDo {
	n.DO = *do.(*gen.DO)
	return n
}
