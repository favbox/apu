// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apu/pkg/store/mysql/model"
)

func newNoteCategory(db *gorm.DB, opts ...gen.DOOption) noteCategory {
	_noteCategory := noteCategory{}

	_noteCategory.noteCategoryDo.UseDB(db, opts...)
	_noteCategory.noteCategoryDo.UseModel(&model.NoteCategory{})

	tableName := _noteCategory.noteCategoryDo.TableName()
	_noteCategory.ALL = field.NewAsterisk(tableName)
	_noteCategory.ID = field.NewInt64(tableName, "id")
	_noteCategory.NoteID = field.NewInt64(tableName, "note_id")
	_noteCategory.CategoryID = field.NewInt64(tableName, "category_id")
	_noteCategory.Score = field.NewFloat32(tableName, "score")
	_noteCategory.CreateTime = field.NewTime(tableName, "create_time")
	_noteCategory.UpdateTime = field.NewTime(tableName, "update_time")

	_noteCategory.fillFieldMap()

	return _noteCategory
}

type noteCategory struct {
	noteCategoryDo

	ALL        field.Asterisk
	ID         field.Int64
	NoteID     field.Int64
	CategoryID field.Int64
	Score      field.Float32
	CreateTime field.Time
	UpdateTime field.Time

	fieldMap map[string]field.Expr
}

func (n noteCategory) Table(newTableName string) *noteCategory {
	n.noteCategoryDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n noteCategory) As(alias string) *noteCategory {
	n.noteCategoryDo.DO = *(n.noteCategoryDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *noteCategory) updateTableName(table string) *noteCategory {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.NoteID = field.NewInt64(table, "note_id")
	n.CategoryID = field.NewInt64(table, "category_id")
	n.Score = field.NewFloat32(table, "score")
	n.CreateTime = field.NewTime(table, "create_time")
	n.UpdateTime = field.NewTime(table, "update_time")

	n.fillFieldMap()

	return n
}

func (n *noteCategory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *noteCategory) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 6)
	n.fieldMap["id"] = n.ID
	n.fieldMap["note_id"] = n.NoteID
	n.fieldMap["category_id"] = n.CategoryID
	n.fieldMap["score"] = n.Score
	n.fieldMap["create_time"] = n.CreateTime
	n.fieldMap["update_time"] = n.UpdateTime
}

func (n noteCategory) clone(db *gorm.DB) noteCategory {
	n.noteCategoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n noteCategory) replaceDB(db *gorm.DB) noteCategory {
	n.noteCategoryDo.ReplaceDB(db)
	return n
}

type noteCategoryDo struct{ gen.DO }

type INoteCategoryDo interface {
	gen.SubQuery
	Debug() INoteCategoryDo
	WithContext(ctx context.Context) INoteCategoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INoteCategoryDo
	WriteDB() INoteCategoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INoteCategoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INoteCategoryDo
	Not(conds ...gen.Condition) INoteCategoryDo
	Or(conds ...gen.Condition) INoteCategoryDo
	Select(conds ...field.Expr) INoteCategoryDo
	Where(conds ...gen.Condition) INoteCategoryDo
	Order(conds ...field.Expr) INoteCategoryDo
	Distinct(cols ...field.Expr) INoteCategoryDo
	Omit(cols ...field.Expr) INoteCategoryDo
	Join(table schema.Tabler, on ...field.Expr) INoteCategoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INoteCategoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) INoteCategoryDo
	Group(cols ...field.Expr) INoteCategoryDo
	Having(conds ...gen.Condition) INoteCategoryDo
	Limit(limit int) INoteCategoryDo
	Offset(offset int) INoteCategoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INoteCategoryDo
	Unscoped() INoteCategoryDo
	Create(values ...*model.NoteCategory) error
	CreateInBatches(values []*model.NoteCategory, batchSize int) error
	Save(values ...*model.NoteCategory) error
	First() (*model.NoteCategory, error)
	Take() (*model.NoteCategory, error)
	Last() (*model.NoteCategory, error)
	Find() ([]*model.NoteCategory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteCategory, err error)
	FindInBatches(result *[]*model.NoteCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NoteCategory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INoteCategoryDo
	Assign(attrs ...field.AssignExpr) INoteCategoryDo
	Joins(fields ...field.RelationField) INoteCategoryDo
	Preload(fields ...field.RelationField) INoteCategoryDo
	FirstOrInit() (*model.NoteCategory, error)
	FirstOrCreate() (*model.NoteCategory, error)
	FindByPage(offset int, limit int) (result []*model.NoteCategory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INoteCategoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n noteCategoryDo) Debug() INoteCategoryDo {
	return n.withDO(n.DO.Debug())
}

func (n noteCategoryDo) WithContext(ctx context.Context) INoteCategoryDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n noteCategoryDo) ReadDB() INoteCategoryDo {
	return n.Clauses(dbresolver.Read)
}

func (n noteCategoryDo) WriteDB() INoteCategoryDo {
	return n.Clauses(dbresolver.Write)
}

func (n noteCategoryDo) Session(config *gorm.Session) INoteCategoryDo {
	return n.withDO(n.DO.Session(config))
}

func (n noteCategoryDo) Clauses(conds ...clause.Expression) INoteCategoryDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n noteCategoryDo) Returning(value interface{}, columns ...string) INoteCategoryDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n noteCategoryDo) Not(conds ...gen.Condition) INoteCategoryDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n noteCategoryDo) Or(conds ...gen.Condition) INoteCategoryDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n noteCategoryDo) Select(conds ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n noteCategoryDo) Where(conds ...gen.Condition) INoteCategoryDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n noteCategoryDo) Order(conds ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n noteCategoryDo) Distinct(cols ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n noteCategoryDo) Omit(cols ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n noteCategoryDo) Join(table schema.Tabler, on ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n noteCategoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n noteCategoryDo) RightJoin(table schema.Tabler, on ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n noteCategoryDo) Group(cols ...field.Expr) INoteCategoryDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n noteCategoryDo) Having(conds ...gen.Condition) INoteCategoryDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n noteCategoryDo) Limit(limit int) INoteCategoryDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n noteCategoryDo) Offset(offset int) INoteCategoryDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n noteCategoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INoteCategoryDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n noteCategoryDo) Unscoped() INoteCategoryDo {
	return n.withDO(n.DO.Unscoped())
}

func (n noteCategoryDo) Create(values ...*model.NoteCategory) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n noteCategoryDo) CreateInBatches(values []*model.NoteCategory, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n noteCategoryDo) Save(values ...*model.NoteCategory) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n noteCategoryDo) First() (*model.NoteCategory, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteCategory), nil
	}
}

func (n noteCategoryDo) Take() (*model.NoteCategory, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteCategory), nil
	}
}

func (n noteCategoryDo) Last() (*model.NoteCategory, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteCategory), nil
	}
}

func (n noteCategoryDo) Find() ([]*model.NoteCategory, error) {
	result, err := n.DO.Find()
	return result.([]*model.NoteCategory), err
}

func (n noteCategoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NoteCategory, err error) {
	buf := make([]*model.NoteCategory, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n noteCategoryDo) FindInBatches(result *[]*model.NoteCategory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n noteCategoryDo) Attrs(attrs ...field.AssignExpr) INoteCategoryDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n noteCategoryDo) Assign(attrs ...field.AssignExpr) INoteCategoryDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n noteCategoryDo) Joins(fields ...field.RelationField) INoteCategoryDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n noteCategoryDo) Preload(fields ...field.RelationField) INoteCategoryDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n noteCategoryDo) FirstOrInit() (*model.NoteCategory, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteCategory), nil
	}
}

func (n noteCategoryDo) FirstOrCreate() (*model.NoteCategory, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NoteCategory), nil
	}
}

func (n noteCategoryDo) FindByPage(offset int, limit int) (result []*model.NoteCategory, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n noteCategoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n noteCategoryDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n noteCategoryDo) Delete(models ...*model.NoteCategory) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *noteCategoryDo) withDO(do gen.Dao) *noteCategoryDo {
	n.DO = *do.(*gen.DO)
	return n
}
